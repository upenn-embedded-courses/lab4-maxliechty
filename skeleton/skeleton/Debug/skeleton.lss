
skeleton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002bc  00800100  00001ad6  00001b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008003bc  008003bc  00001e26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039a1  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001012  00000000  00000000  00005a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a51  00000000  00000000  00006a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  000084bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  00008aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021cd  00000000  00000000  00009319  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ed       	ldi	r30, 0xD6	; 214
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3b       	cpi	r26, 0xBC	; 188
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ac eb       	ldi	r26, 0xBC	; 188
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 31       	cpi	r26, 0x18	; 24
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 40 0b 	call	0x1680	; 0x1680 <main>
      9e:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <time>:
      a6:	fc 01       	movw	r30, r24
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	f8 94       	cli
      ac:	60 91 14 06 	lds	r22, 0x0614	; 0x800614 <__system_time>
      b0:	70 91 15 06 	lds	r23, 0x0615	; 0x800615 <__system_time+0x1>
      b4:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <__system_time+0x2>
      b8:	90 91 17 06 	lds	r25, 0x0617	; 0x800617 <__system_time+0x3>
      bc:	0f be       	out	0x3f, r0	; 63
      be:	30 97       	sbiw	r30, 0x00	; 0
      c0:	21 f0       	breq	.+8      	; 0xca <time+0x24>
      c2:	60 83       	st	Z, r22
      c4:	71 83       	std	Z+1, r23	; 0x01
      c6:	82 83       	std	Z+2, r24	; 0x02
      c8:	93 83       	std	Z+3, r25	; 0x03
      ca:	08 95       	ret

000000cc <update_speed>:
}

int ball_position_x()
{
	return ball_x;
}
      cc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
      d0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
      d4:	82 17       	cp	r24, r18
      d6:	93 07       	cpc	r25, r19
      d8:	ac f0       	brlt	.+42     	; 0x104 <update_speed+0x38>
      da:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
      de:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
      e2:	9c 01       	movw	r18, r24
      e4:	22 0f       	add	r18, r18
      e6:	33 1f       	adc	r19, r19
      e8:	82 0f       	add	r24, r18
      ea:	93 1f       	adc	r25, r19
      ec:	84 9f       	mul	r24, r20
      ee:	90 01       	movw	r18, r0
      f0:	85 9f       	mul	r24, r21
      f2:	30 0d       	add	r19, r0
      f4:	94 9f       	mul	r25, r20
      f6:	30 0d       	add	r19, r0
      f8:	11 24       	eor	r1, r1
      fa:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <ball_speed_y+0x1>
      fe:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <ball_speed_y>
     102:	08 95       	ret
     104:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     108:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     10c:	26 17       	cp	r18, r22
     10e:	37 07       	cpc	r19, r23
     110:	c4 f0       	brlt	.+48     	; 0x142 <update_speed+0x76>
     112:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     116:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     11a:	9c 01       	movw	r18, r24
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	91 95       	neg	r25
     126:	81 95       	neg	r24
     128:	91 09       	sbc	r25, r1
     12a:	48 9f       	mul	r20, r24
     12c:	90 01       	movw	r18, r0
     12e:	49 9f       	mul	r20, r25
     130:	30 0d       	add	r19, r0
     132:	58 9f       	mul	r21, r24
     134:	30 0d       	add	r19, r0
     136:	11 24       	eor	r1, r1
     138:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <ball_speed_y+0x1>
     13c:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <ball_speed_y>
     140:	08 95       	ret
     142:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     146:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     14a:	82 17       	cp	r24, r18
     14c:	93 07       	cpc	r25, r19
     14e:	e4 f4       	brge	.+56     	; 0x188 <update_speed+0xbc>
     150:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ball_y>
     154:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ball_y+0x1>
     158:	9c 01       	movw	r18, r24
     15a:	2b 5f       	subi	r18, 0xFB	; 251
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	e2 17       	cp	r30, r18
     160:	f3 07       	cpc	r31, r19
     162:	94 f4       	brge	.+36     	; 0x188 <update_speed+0xbc>
     164:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     168:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	48 9f       	mul	r20, r24
     172:	90 01       	movw	r18, r0
     174:	49 9f       	mul	r20, r25
     176:	30 0d       	add	r19, r0
     178:	58 9f       	mul	r21, r24
     17a:	30 0d       	add	r19, r0
     17c:	11 24       	eor	r1, r1
     17e:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <ball_speed_y+0x1>
     182:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <ball_speed_y>
     186:	08 95       	ret
     188:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     18c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     190:	26 17       	cp	r18, r22
     192:	37 07       	cpc	r19, r23
     194:	fc f4       	brge	.+62     	; 0x1d4 <update_speed+0x108>
     196:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ball_y>
     19a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ball_y+0x1>
     19e:	9b 01       	movw	r18, r22
     1a0:	25 50       	subi	r18, 0x05	; 5
     1a2:	31 09       	sbc	r19, r1
     1a4:	2e 17       	cp	r18, r30
     1a6:	3f 07       	cpc	r19, r31
     1a8:	ac f4       	brge	.+42     	; 0x1d4 <update_speed+0x108>
     1aa:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     1ae:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     1b2:	91 95       	neg	r25
     1b4:	81 95       	neg	r24
     1b6:	91 09       	sbc	r25, r1
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	48 9f       	mul	r20, r24
     1be:	90 01       	movw	r18, r0
     1c0:	49 9f       	mul	r20, r25
     1c2:	30 0d       	add	r19, r0
     1c4:	58 9f       	mul	r21, r24
     1c6:	30 0d       	add	r19, r0
     1c8:	11 24       	eor	r1, r1
     1ca:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <ball_speed_y+0x1>
     1ce:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <ball_speed_y>
     1d2:	08 95       	ret
     1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ball_y>
     1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ball_y+0x1>
     1dc:	9c 01       	movw	r18, r24
     1de:	2b 5f       	subi	r18, 0xFB	; 251
     1e0:	3f 4f       	sbci	r19, 0xFF	; 255
     1e2:	2e 17       	cp	r18, r30
     1e4:	3f 07       	cpc	r19, r31
     1e6:	cc f4       	brge	.+50     	; 0x21a <update_speed+0x14e>
     1e8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ball_y>
     1ec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ball_y+0x1>
     1f0:	2e 5f       	subi	r18, 0xFE	; 254
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	e2 17       	cp	r30, r18
     1f6:	f3 07       	cpc	r31, r19
     1f8:	84 f4       	brge	.+32     	; 0x21a <update_speed+0x14e>
     1fa:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <ball_speed_x>
     1fe:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     202:	42 9f       	mul	r20, r18
     204:	c0 01       	movw	r24, r0
     206:	43 9f       	mul	r20, r19
     208:	90 0d       	add	r25, r0
     20a:	52 9f       	mul	r21, r18
     20c:	90 0d       	add	r25, r0
     20e:	11 24       	eor	r1, r1
     210:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <ball_speed_y+0x1>
     214:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <ball_speed_y>
     218:	08 95       	ret
     21a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ball_y>
     21e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ball_y+0x1>
     222:	9b 01       	movw	r18, r22
     224:	25 50       	subi	r18, 0x05	; 5
     226:	31 09       	sbc	r19, r1
     228:	e2 17       	cp	r30, r18
     22a:	f3 07       	cpc	r31, r19
     22c:	e4 f4       	brge	.+56     	; 0x266 <update_speed+0x19a>
     22e:	67 50       	subi	r22, 0x07	; 7
     230:	71 09       	sbc	r23, r1
     232:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     236:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     23a:	62 17       	cp	r22, r18
     23c:	73 07       	cpc	r23, r19
     23e:	9c f4       	brge	.+38     	; 0x266 <update_speed+0x19a>
     240:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     244:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     248:	91 95       	neg	r25
     24a:	81 95       	neg	r24
     24c:	91 09       	sbc	r25, r1
     24e:	48 9f       	mul	r20, r24
     250:	90 01       	movw	r18, r0
     252:	49 9f       	mul	r20, r25
     254:	30 0d       	add	r19, r0
     256:	58 9f       	mul	r21, r24
     258:	30 0d       	add	r19, r0
     25a:	11 24       	eor	r1, r1
     25c:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <ball_speed_y+0x1>
     260:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <ball_speed_y>
     264:	08 95       	ret
     266:	07 97       	sbiw	r24, 0x07	; 7
     268:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     26c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     270:	82 17       	cp	r24, r18
     272:	93 07       	cpc	r25, r19
     274:	21 f4       	brne	.+8      	; 0x27e <update_speed+0x1b2>
     276:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <ball_speed_y+0x1>
     27a:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <ball_speed_y>
     27e:	08 95       	ret

00000280 <update_ball>:
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     28c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     290:	00 91 c2 03 	lds	r16, 0x03C2	; 0x8003c2 <ball_speed_y>
     294:	10 91 c3 03 	lds	r17, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     298:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ball_x>
     29c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ball_x+0x1>
     2a0:	c0 91 c4 03 	lds	r28, 0x03C4	; 0x8003c4 <ball_speed_x>
     2a4:	d0 91 c5 03 	lds	r29, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     2a8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ball_y>
     2ac:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ball_y+0x1>
     2b0:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <ball_speed_y>
     2b4:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     2b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     2bc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     2c0:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <ball_speed_x>
     2c4:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     2c8:	20 1b       	sub	r18, r16
     2ca:	4c 1b       	sub	r20, r28
     2cc:	6a 1b       	sub	r22, r26
     2ce:	6e 5f       	subi	r22, 0xFE	; 254
     2d0:	8e 1b       	sub	r24, r30
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	8e 5f       	subi	r24, 0xFE	; 254
     2d8:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     2dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <score_update>
     2e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <score_update+0x1>
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	49 f4       	brne	.+18     	; 0x2fa <update_ball+0x7a>
     2e8:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <player_score>
     2ec:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <player_score+0x1>
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
     2f8:	0e c0       	rjmp	.+28     	; 0x316 <update_ball+0x96>
     2fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <score_update>
     2fe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <score_update+0x1>
     302:	89 2b       	or	r24, r25
     304:	41 f4       	brne	.+16     	; 0x316 <update_ball+0x96>
     306:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__data_end>
     30a:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__data_end+0x1>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <score_update+0x1>
     31e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <score_update>
     322:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <ball_speed_x>
     326:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     32a:	33 23       	and	r19, r19
     32c:	1c f4       	brge	.+6      	; 0x334 <update_ball+0xb4>
     32e:	31 95       	neg	r19
     330:	21 95       	neg	r18
     332:	31 09       	sbc	r19, r1
     334:	8c e9       	ldi	r24, 0x9C	; 156
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	82 1b       	sub	r24, r18
     33a:	93 0b       	sbc	r25, r19
     33c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ball_x>
     340:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ball_x+0x1>
     344:	28 17       	cp	r18, r24
     346:	39 07       	cpc	r19, r25
     348:	0c f4       	brge	.+2      	; 0x34c <update_ball+0xcc>
     34a:	a6 c0       	rjmp	.+332    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     34c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     350:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     354:	18 16       	cp	r1, r24
     356:	19 06       	cpc	r1, r25
     358:	0c f0       	brlt	.+2      	; 0x35c <update_ball+0xdc>
     35a:	9e c0       	rjmp	.+316    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     35c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ball_x>
     360:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ball_x+0x1>
     364:	8b e9       	ldi	r24, 0x9B	; 155
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ball_x+0x1>
     36c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ball_x>
     370:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     374:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     378:	82 1b       	sub	r24, r18
     37a:	93 0b       	sbc	r25, r19
     37c:	9c 01       	movw	r18, r24
     37e:	22 f4       	brpl	.+8      	; 0x388 <update_ball+0x108>
     380:	22 27       	eor	r18, r18
     382:	33 27       	eor	r19, r19
     384:	28 1b       	sub	r18, r24
     386:	39 0b       	sbc	r19, r25
     388:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <ball_speed_y>
     38c:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     390:	28 9f       	mul	r18, r24
     392:	a0 01       	movw	r20, r0
     394:	29 9f       	mul	r18, r25
     396:	50 0d       	add	r21, r0
     398:	38 9f       	mul	r19, r24
     39a:	50 0d       	add	r21, r0
     39c:	11 24       	eor	r1, r1
     39e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     3a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     3a6:	84 0f       	add	r24, r20
     3a8:	95 1f       	adc	r25, r21
     3aa:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ball_y+0x1>
     3ae:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ball_y>
     3b2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <rand>
     3b6:	66 e0       	ldi	r22, 0x06	; 6
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <ball_speed_x+0x1>
     3c4:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <ball_speed_x>
     3c8:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     3cc:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     3d0:	91 95       	neg	r25
     3d2:	81 95       	neg	r24
     3d4:	91 09       	sbc	r25, r1
     3d6:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <ball_speed_x+0x1>
     3da:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <ball_speed_x>
     3de:	0e 94 c5 06 	call	0xd8a	; 0xd8a <get_paddle_position>
     3e2:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <paddle_top+0x1>
     3e6:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <paddle_top>
     3ea:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <paddle_top>
     3ee:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <paddle_top+0x1>
     3f2:	0f 96       	adiw	r24, 0x0f	; 15
     3f4:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <paddle_bottom+0x1>
     3f8:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <paddle_bottom>
     3fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     400:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     404:	02 96       	adiw	r24, 0x02	; 2
     406:	20 91 0e 05 	lds	r18, 0x050E	; 0x80050e <paddle_top>
     40a:	30 91 0f 05 	lds	r19, 0x050F	; 0x80050f <paddle_top+0x1>
     40e:	82 17       	cp	r24, r18
     410:	93 07       	cpc	r25, r19
     412:	dc f0       	brlt	.+54     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     414:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     418:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     41c:	02 97       	sbiw	r24, 0x02	; 2
     41e:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <paddle_bottom>
     422:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <paddle_bottom+0x1>
     426:	28 17       	cp	r18, r24
     428:	39 07       	cpc	r19, r25
     42a:	7c f0       	brlt	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     42c:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
     430:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <paddle_bottom>
     434:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <paddle_bottom+0x1>
     438:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <paddle_top>
     43c:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <paddle_top+0x1>
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	0e 94 66 00 	call	0xcc	; 0xcc <update_speed>
     448:	d2 c0       	rjmp	.+420    	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     44a:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ball_y>
     44e:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ball_y+0x1>
     452:	dc 2f       	mov	r29, r28
     454:	de 5f       	subi	r29, 0xFE	; 254
     456:	0f ef       	ldi	r16, 0xFF	; 255
     458:	1f ef       	ldi	r17, 0xFF	; 255
     45a:	2d 2f       	mov	r18, r29
     45c:	4f e9       	ldi	r20, 0x9F	; 159
     45e:	6c 2f       	mov	r22, r28
     460:	8d e9       	ldi	r24, 0x9D	; 157
     462:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     466:	8f e3       	ldi	r24, 0x3F	; 63
     468:	9c e9       	ldi	r25, 0x9C	; 156
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	2d 2f       	mov	r18, r29
     478:	4f e9       	ldi	r20, 0x9F	; 159
     47a:	6c 2f       	mov	r22, r28
     47c:	8d e9       	ldi	r24, 0x9D	; 157
     47e:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     482:	8b b1       	in	r24, 0x0b	; 11
     484:	82 60       	ori	r24, 0x02	; 2
     486:	8b b9       	out	0x0b, r24	; 11
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 48 04 	call	0x890	; 0x890 <score>
     490:	8b b1       	in	r24, 0x0b	; 11
     492:	8d 7f       	andi	r24, 0xFD	; 253
     494:	8b b9       	out	0x0b, r24	; 11
     496:	ab c0       	rjmp	.+342    	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     498:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     49c:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     4a0:	99 23       	and	r25, r25
     4a2:	1c f4       	brge	.+6      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4a4:	91 95       	neg	r25
     4a6:	81 95       	neg	r24
     4a8:	91 09       	sbc	r25, r1
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ball_x>
     4b0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ball_x+0x1>
     4b4:	82 17       	cp	r24, r18
     4b6:	93 07       	cpc	r25, r19
     4b8:	0c f4       	brge	.+2      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4ba:	99 c0       	rjmp	.+306    	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     4bc:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     4c0:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     4c4:	99 23       	and	r25, r25
     4c6:	0c f0       	brlt	.+2      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     4c8:	92 c0       	rjmp	.+292    	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     4ca:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ball_x>
     4ce:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ball_x+0x1>
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ball_x+0x1>
     4da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ball_x>
     4de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     4e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     4e6:	82 1b       	sub	r24, r18
     4e8:	93 0b       	sbc	r25, r19
     4ea:	9c 01       	movw	r18, r24
     4ec:	22 f4       	brpl	.+8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4ee:	22 27       	eor	r18, r18
     4f0:	33 27       	eor	r19, r19
     4f2:	28 1b       	sub	r18, r24
     4f4:	39 0b       	sbc	r19, r25
     4f6:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <ball_speed_y>
     4fa:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     4fe:	28 9f       	mul	r18, r24
     500:	a0 01       	movw	r20, r0
     502:	29 9f       	mul	r18, r25
     504:	50 0d       	add	r21, r0
     506:	38 9f       	mul	r19, r24
     508:	50 0d       	add	r21, r0
     50a:	11 24       	eor	r1, r1
     50c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     510:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     514:	84 0f       	add	r24, r20
     516:	95 1f       	adc	r25, r21
     518:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ball_y+0x1>
     51c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ball_y>
     520:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <rand>
     524:	66 e0       	ldi	r22, 0x06	; 6
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <ball_speed_x+0x1>
     532:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <ball_speed_x>
     536:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_cpu_paddle_position>
     53a:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <cpu_paddle_top+0x1>
     53e:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <cpu_paddle_top>
     542:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <cpu_paddle_top>
     546:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <cpu_paddle_top+0x1>
     54a:	0f 96       	adiw	r24, 0x0f	; 15
     54c:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <cpu_paddle_bottom+0x1>
     550:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <cpu_paddle_bottom>
     554:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     558:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     55c:	02 96       	adiw	r24, 0x02	; 2
     55e:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <cpu_paddle_top>
     562:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <cpu_paddle_top+0x1>
     566:	82 17       	cp	r24, r18
     568:	93 07       	cpc	r25, r19
     56a:	dc f0       	brlt	.+54     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
     56c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     570:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     574:	02 97       	sbiw	r24, 0x02	; 2
     576:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <cpu_paddle_bottom>
     57a:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <cpu_paddle_bottom+0x1>
     57e:	28 17       	cp	r18, r24
     580:	39 07       	cpc	r19, r25
     582:	7c f0       	brlt	.+30     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
     584:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
     588:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <cpu_paddle_bottom>
     58c:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <cpu_paddle_bottom+0x1>
     590:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <cpu_paddle_top>
     594:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <cpu_paddle_top+0x1>
     598:	4f ef       	ldi	r20, 0xFF	; 255
     59a:	5f ef       	ldi	r21, 0xFF	; 255
     59c:	0e 94 66 00 	call	0xcc	; 0xcc <update_speed>
     5a0:	26 c0       	rjmp	.+76     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     5a2:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ball_y>
     5a6:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ball_y+0x1>
     5aa:	dc 2f       	mov	r29, r28
     5ac:	de 5f       	subi	r29, 0xFE	; 254
     5ae:	0f ef       	ldi	r16, 0xFF	; 255
     5b0:	1f ef       	ldi	r17, 0xFF	; 255
     5b2:	2d 2f       	mov	r18, r29
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	6c 2f       	mov	r22, r28
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     5be:	8f e3       	ldi	r24, 0x3F	; 63
     5c0:	9c e9       	ldi	r25, 0x9C	; 156
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     5c8:	00 00       	nop
     5ca:	00 e0       	ldi	r16, 0x00	; 0
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	2d 2f       	mov	r18, r29
     5d0:	42 e0       	ldi	r20, 0x02	; 2
     5d2:	6c 2f       	mov	r22, r28
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     5da:	8b b1       	in	r24, 0x0b	; 11
     5dc:	82 60       	ori	r24, 0x02	; 2
     5de:	8b b9       	out	0x0b, r24	; 11
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 48 04 	call	0x890	; 0x890 <score>
     5e8:	8b b1       	in	r24, 0x0b	; 11
     5ea:	8d 7f       	andi	r24, 0xFD	; 253
     5ec:	8b b9       	out	0x0b, r24	; 11
     5ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     5f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     5f6:	40 97       	sbiw	r24, 0x10	; 16
     5f8:	64 f5       	brge	.+88     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     5fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     5fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     602:	07 97       	sbiw	r24, 0x07	; 7
     604:	34 f1       	brlt	.+76     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     606:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     60a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     60e:	83 36       	cpi	r24, 0x63	; 99
     610:	91 05       	cpc	r25, r1
     612:	74 f0       	brlt	.+28     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     614:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     618:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     61c:	8e 36       	cpi	r24, 0x6E	; 110
     61e:	91 05       	cpc	r25, r1
     620:	3c f4       	brge	.+14     	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <score_update+0x1>
     62a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <score_update>
     62e:	11 c0       	rjmp	.+34     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     630:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     634:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     638:	c6 97       	sbiw	r24, 0x36	; 54
     63a:	5c f0       	brlt	.+22     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     63c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     640:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     644:	81 34       	cpi	r24, 0x41	; 65
     646:	91 05       	cpc	r25, r1
     648:	24 f4       	brge	.+8      	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     64a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <score_update+0x1>
     64e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <score_update>
     652:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <ball_speed_y>
     656:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     65a:	99 23       	and	r25, r25
     65c:	1c f4       	brge	.+6      	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
     65e:	91 95       	neg	r25
     660:	81 95       	neg	r24
     662:	91 09       	sbc	r25, r1
     664:	02 96       	adiw	r24, 0x02	; 2
     666:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     66a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     66e:	82 17       	cp	r24, r18
     670:	93 07       	cpc	r25, r19
     672:	a4 f4       	brge	.+40     	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     674:	20 91 c2 03 	lds	r18, 0x03C2	; 0x8003c2 <ball_speed_y>
     678:	30 91 c3 03 	lds	r19, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     67c:	33 23       	and	r19, r19
     67e:	1c f4       	brge	.+6      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
     680:	31 95       	neg	r19
     682:	21 95       	neg	r18
     684:	31 09       	sbc	r19, r1
     686:	8e e7       	ldi	r24, 0x7E	; 126
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	82 1b       	sub	r24, r18
     68c:	93 0b       	sbc	r25, r19
     68e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     692:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     696:	28 17       	cp	r18, r24
     698:	39 07       	cpc	r19, r25
     69a:	6c f0       	brlt	.+26     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
     69c:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
     6a0:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <ball_speed_y>
     6a4:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     6a8:	91 95       	neg	r25
     6aa:	81 95       	neg	r24
     6ac:	91 09       	sbc	r25, r1
     6ae:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <ball_speed_y+0x1>
     6b2:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <ball_speed_y>
     6b6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     6ba:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     6be:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ball_x>
     6c2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ball_x+0x1>
     6c6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ball_y>
     6ca:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ball_y+0x1>
     6ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     6d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     6d6:	2e 5f       	subi	r18, 0xFE	; 254
     6d8:	4e 5f       	subi	r20, 0xFE	; 254
     6da:	0f ef       	ldi	r16, 0xFF	; 255
     6dc:	1f ef       	ldi	r17, 0xFF	; 255
     6de:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     6e2:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <skip>
     6e6:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <skip+0x1>
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f9 f4       	brne	.+62     	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	29 e6       	ldi	r18, 0x69	; 105
     6f2:	38 e1       	ldi	r19, 0x18	; 24
     6f4:	91 50       	subi	r25, 0x01	; 1
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
     6fe:	00 00       	nop
     700:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     704:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     708:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ball_x>
     70c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ball_x+0x1>
     710:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ball_y>
     714:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ball_y+0x1>
     718:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     71c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     720:	2e 5f       	subi	r18, 0xFE	; 254
     722:	4e 5f       	subi	r20, 0xFE	; 254
     724:	00 e0       	ldi	r16, 0x00	; 0
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     72c:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <ball_speed_x>
     730:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     734:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     738:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     73c:	82 0f       	add	r24, r18
     73e:	93 1f       	adc	r25, r19
     740:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ball_x+0x1>
     744:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ball_x>
     748:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     74c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     750:	99 23       	and	r25, r25
     752:	2c f4       	brge	.+10     	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     754:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ball_x+0x1>
     758:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ball_x>
     75c:	0d c0       	rjmp	.+26     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     75e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     762:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     766:	8e 39       	cpi	r24, 0x9E	; 158
     768:	91 05       	cpc	r25, r1
     76a:	34 f0       	brlt	.+12     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
     76c:	8d e9       	ldi	r24, 0x9D	; 157
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ball_x+0x1>
     774:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ball_x>
     778:	20 91 c2 03 	lds	r18, 0x03C2	; 0x8003c2 <ball_speed_y>
     77c:	30 91 c3 03 	lds	r19, 0x03C3	; 0x8003c3 <ball_speed_y+0x1>
     780:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     784:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ball_y+0x1>
     790:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ball_y>
     794:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     798:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     79c:	99 23       	and	r25, r25
     79e:	2c f4       	brge	.+10     	; 0x7aa <__EEPROM_REGION_LENGTH__+0x3aa>
     7a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ball_y+0x1>
     7a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ball_y>
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
     7aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     7ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     7b2:	8e 37       	cpi	r24, 0x7E	; 126
     7b4:	91 05       	cpc	r25, r1
     7b6:	34 f0       	brlt	.+12     	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
     7b8:	8d e7       	ldi	r24, 0x7D	; 125
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ball_y+0x1>
     7c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ball_y>
     7c4:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <skip+0x1>
     7c8:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <skip>
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret

000007d6 <launch_ball>:
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     7de:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     7e2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ball_x>
     7e6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ball_x+0x1>
     7ea:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ball_y>
     7ee:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ball_y+0x1>
     7f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     7f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     7fa:	2e 5f       	subi	r18, 0xFE	; 254
     7fc:	4e 5f       	subi	r20, 0xFE	; 254
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     806:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <rand>
     80a:	6c e0       	ldi	r22, 0x0C	; 12
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     812:	06 97       	sbiw	r24, 0x06	; 6
     814:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <ball_speed_x+0x1>
     818:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <ball_speed_x>
     81c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <ball_speed_x>
     820:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <ball_speed_x+0x1>
     824:	89 2b       	or	r24, r25
     826:	79 f3       	breq	.-34     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     828:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <rand>
     82c:	6c e0       	ldi	r22, 0x0C	; 12
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     834:	06 97       	sbiw	r24, 0x06	; 6
     836:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <ball_speed_y+0x1>
     83a:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <ball_speed_y>
     83e:	0e 94 40 01 	call	0x280	; 0x280 <update_ball>
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <ball_init>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 53 00 	call	0xa6	; 0xa6 <time>
     854:	cb 01       	movw	r24, r22
     856:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <srand>
     85a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ball_y>
     85e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ball_y+0x1>
     862:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <ball_x>
     866:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <ball_x+0x1>
     86a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ball_y>
     86e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ball_y+0x1>
     872:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ball_x>
     876:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ball_x+0x1>
     87a:	2e 5f       	subi	r18, 0xFE	; 254
     87c:	4e 5f       	subi	r20, 0xFE	; 254
     87e:	0f ef       	ldi	r16, 0xFF	; 255
     880:	1f ef       	ldi	r17, 0xFF	; 255
     882:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     886:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <launch_ball>
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	08 95       	ret

00000890 <score>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	0e 94 aa 04 	call	0x954	; 0x954 <noteLow>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <skip+0x1>
     8a2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <skip>
     8a6:	8f e4       	ldi	r24, 0x4F	; 79
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ball_x+0x1>
     8ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ball_x>
     8b2:	8f e3       	ldi	r24, 0x3F	; 63
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ball_y+0x1>
     8ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ball_y>
     8be:	c1 30       	cpi	r28, 0x01	; 1
     8c0:	d1 05       	cpc	r29, r1
     8c2:	e1 f4       	brne	.+56     	; 0x8fc <score+0x6c>
     8c4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <player_score>
     8c8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <player_score+0x1>
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <player_score+0x1>
     8d2:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <player_score>
     8d6:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <player_score>
     8da:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <player_score+0x1>
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
     8e6:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <player_score>
     8ea:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <player_score+0x1>
     8ee:	0b 97       	sbiw	r24, 0x0b	; 11
     8f0:	11 f5       	brne	.+68     	; 0x936 <__stack+0x37>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 4c 09 	call	0x1298	; 0x1298 <winner>
     8fa:	1d c0       	rjmp	.+58     	; 0x936 <__stack+0x37>
     8fc:	cd 2b       	or	r28, r29
     8fe:	d9 f4       	brne	.+54     	; 0x936 <__stack+0x37>
     900:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__data_end>
     904:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__data_end+0x1>
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <__data_end+0x1>
     90e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <__data_end>
     912:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__data_end>
     916:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__data_end+0x1>
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
     922:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__data_end>
     926:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__data_end+0x1>
     92a:	0b 97       	sbiw	r24, 0x0b	; 11
     92c:	21 f4       	brne	.+8      	; 0x936 <__stack+0x37>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 4c 09 	call	0x1298	; 0x1298 <winner>
     936:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <launch_ball>
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <ball_position_y>:

int ball_position_y()
{
	return ball_y;
     940:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ball_y>
     944:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ball_y+0x1>
     948:	08 95       	ret

0000094a <off>:
	off();
}

void off()
{
	OCR2A = 0;
     94a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0;
     94e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     952:	08 95       	ret

00000954 <noteLow>:
	off();
}

void noteLow()
{
	OCR2A = LOW_NOTE;
     954:	e3 eb       	ldi	r30, 0xB3	; 179
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 ef       	ldi	r24, 0xF0	; 240
     95a:	80 83       	st	Z, r24
	OCR2B = (float)OCR2A / 20;
     95c:	60 81       	ld	r22, Z
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__floatunsisf>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 ea       	ldi	r20, 0xA0	; 160
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divsf3>
     974:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fixunssfsi>
     978:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97c:	2f ef       	ldi	r18, 0xFF	; 255
     97e:	81 ee       	ldi	r24, 0xE1	; 225
     980:	94 e0       	ldi	r25, 0x04	; 4
     982:	21 50       	subi	r18, 0x01	; 1
     984:	80 40       	sbci	r24, 0x00	; 0
     986:	90 40       	sbci	r25, 0x00	; 0
     988:	e1 f7       	brne	.-8      	; 0x982 <noteLow+0x2e>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <noteLow+0x38>
     98c:	00 00       	nop
	_delay_ms(100);
	off();
     98e:	0e 94 a5 04 	call	0x94a	; 0x94a <off>
     992:	08 95       	ret

00000994 <noteHigh>:
}

void noteHigh()
{
	OCR2A = HIGH_NOTE;
     994:	e3 eb       	ldi	r30, 0xB3	; 179
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 ef       	ldi	r24, 0xF0	; 240
     99a:	80 83       	st	Z, r24
	OCR2B = (float)OCR2A / 20;
     99c:	60 81       	ld	r22, Z
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__floatunsisf>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 ea       	ldi	r20, 0xA0	; 160
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divsf3>
     9b4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fixunssfsi>
     9b8:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     9bc:	8f e3       	ldi	r24, 0x3F	; 63
     9be:	9c e9       	ldi	r25, 0x9C	; 156
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <noteHigh+0x2c>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <noteHigh+0x32>
     9c6:	00 00       	nop
	_delay_ms(10);
	off();
     9c8:	0e 94 a5 04 	call	0x94a	; 0x94a <off>
     9cc:	08 95       	ret

000009ce <start_sound>:
	start_sound();
}

void start_sound()
{
	noteHigh();
     9ce:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
	off();
     9d2:	0e 94 a5 04 	call	0x94a	; 0x94a <off>
     9d6:	2f ef       	ldi	r18, 0xFF	; 255
     9d8:	81 ee       	ldi	r24, 0xE1	; 225
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <start_sound+0xe>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <start_sound+0x18>
     9e6:	00 00       	nop
	_delay_ms(100);
	noteHigh();
     9e8:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
	off();
     9ec:	0e 94 a5 04 	call	0x94a	; 0x94a <off>
     9f0:	08 95       	ret

000009f2 <buzzer_init>:

#include "buzzer.h"

void buzzer_init()
{
	DDRD |= (1 << DDD3);
     9f2:	8a b1       	in	r24, 0x0a	; 10
     9f4:	88 60       	ori	r24, 0x08	; 8
     9f6:	8a b9       	out	0x0a, r24	; 10
	
	TCCR2B |= (1 << CS20);
     9f8:	a1 eb       	ldi	r26, 0xB1	; 177
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	8c 91       	ld	r24, X
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	8c 93       	st	X, r24
	TCCR2B |= (1 << CS21);
     a02:	8c 91       	ld	r24, X
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	8c 93       	st	X, r24
	TCCR2B &= ~(1 << CS22);
     a08:	8c 91       	ld	r24, X
     a0a:	8b 7f       	andi	r24, 0xFB	; 251
     a0c:	8c 93       	st	X, r24

	TCCR2A |= (1 << WGM20);
     a0e:	e0 eb       	ldi	r30, 0xB0	; 176
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	81 60       	ori	r24, 0x01	; 1
     a16:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);
     a18:	80 81       	ld	r24, Z
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	80 83       	st	Z, r24
	TCCR2B |= (1 << WGM22);
     a1e:	8c 91       	ld	r24, X
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	8c 93       	st	X, r24

	TCCR2A |= (1 << COM2A0);
     a24:	80 81       	ld	r24, Z
     a26:	80 64       	ori	r24, 0x40	; 64
     a28:	80 83       	st	Z, r24
	TCCR2A &= ~(1 << COM0A1);
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 77       	andi	r24, 0x7F	; 127
     a2e:	80 83       	st	Z, r24
	OCR2A = 0;
     a30:	a3 eb       	ldi	r26, 0xB3	; 179
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	1c 92       	st	X, r1
	
	TCCR2A &= ~(1 << COM2B0);
     a36:	80 81       	ld	r24, Z
     a38:	8f 7e       	andi	r24, 0xEF	; 239
     a3a:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2B1);
     a3c:	80 81       	ld	r24, Z
     a3e:	80 62       	ori	r24, 0x20	; 32
     a40:	80 83       	st	Z, r24
	OCR2B = (float)OCR2A / 20;
     a42:	6c 91       	ld	r22, X
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__floatunsisf>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 ea       	ldi	r20, 0xA0	; 160
     a54:	51 e4       	ldi	r21, 0x41	; 65
     a56:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__divsf3>
     a5a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__fixunssfsi>
     a5e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	start_sound();
     a62:	0e 94 e7 04 	call	0x9ce	; 0x9ce <start_sound>
     a66:	08 95       	ret

00000a68 <joystick_init>:
volatile int cpu_y = 0;
volatile int control;

void joystick_init()
{
	PRR &= ~(1 << PRADC);
     a68:	e4 e6       	ldi	r30, 0x64	; 100
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8e 7f       	andi	r24, 0xFE	; 254
     a70:	80 83       	st	Z, r24
	
	ADMUX |= (1 << REFS0);
     a72:	ac e7       	ldi	r26, 0x7C	; 124
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	8c 91       	ld	r24, X
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	8c 93       	st	X, r24
	ADMUX &= ~(1 << REFS1);
     a7c:	8c 91       	ld	r24, X
     a7e:	8f 77       	andi	r24, 0x7F	; 127
     a80:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADPS0);
     a82:	ea e7       	ldi	r30, 0x7A	; 122
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
     a8c:	80 81       	ld	r24, Z
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
     a92:	80 81       	ld	r24, Z
     a94:	84 60       	ori	r24, 0x04	; 4
     a96:	80 83       	st	Z, r24
	
	ADMUX &= ~(1 << MUX0);
     a98:	8c 91       	ld	r24, X
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX1);
     a9e:	8c 91       	ld	r24, X
     aa0:	8d 7f       	andi	r24, 0xFD	; 253
     aa2:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX2);
     aa4:	8c 91       	ld	r24, X
     aa6:	8b 7f       	andi	r24, 0xFB	; 251
     aa8:	8c 93       	st	X, r24
	ADMUX &= ~(1 << MUX3);
     aaa:	8c 91       	ld	r24, X
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADATE);
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << ADTS0);
     ab6:	ab e7       	ldi	r26, 0x7B	; 123
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	8c 91       	ld	r24, X
     abc:	8e 7f       	andi	r24, 0xFE	; 254
     abe:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS1);
     ac0:	8c 91       	ld	r24, X
     ac2:	8d 7f       	andi	r24, 0xFD	; 253
     ac4:	8c 93       	st	X, r24
	ADCSRB &= ~(1 << ADTS2);
     ac6:	8c 91       	ld	r24, X
     ac8:	8b 7f       	andi	r24, 0xFB	; 251
     aca:	8c 93       	st	X, r24
	
	DIDR0 |= (1 << ADC0D);
     acc:	ae e7       	ldi	r26, 0x7E	; 126
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	8c 91       	ld	r24, X
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);
     ad6:	80 81       	ld	r24, Z
     ad8:	80 68       	ori	r24, 0x80	; 128
     ada:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
     adc:	80 81       	ld	r24, Z
     ade:	80 64       	ori	r24, 0x40	; 64
     ae0:	80 83       	st	Z, r24
	
	control = JOYSTICK;
     ae2:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <control+0x1>
     ae6:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <control>
     aea:	08 95       	ret

00000aec <nodeMCU_init>:
}

void nodeMCU_init()
{
	DDRD &= ~(1 << DDD2); // UP
     aec:	8a b1       	in	r24, 0x0a	; 10
     aee:	8b 7f       	andi	r24, 0xFB	; 251
     af0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD5); // DOWN
     af2:	8a b1       	in	r24, 0x0a	; 10
     af4:	8f 7d       	andi	r24, 0xDF	; 223
     af6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD7); // SELECT
     af8:	8a b1       	in	r24, 0x0a	; 10
     afa:	8f 77       	andi	r24, 0x7F	; 127
     afc:	8a b9       	out	0x0a, r24	; 10
	
	control = NODE;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <control+0x1>
     b06:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <control>
     b0a:	08 95       	ret

00000b0c <get_speed>:
}

int get_speed(int ADC_value)
{
	int speed;
	if (ADC_value >= 490 && ADC_value <= 530)
     b0c:	9c 01       	movw	r18, r24
     b0e:	2a 5e       	subi	r18, 0xEA	; 234
     b10:	31 40       	sbci	r19, 0x01	; 1
     b12:	29 32       	cpi	r18, 0x29	; 41
     b14:	31 05       	cpc	r19, r1
     b16:	28 f1       	brcs	.+74     	; 0xb62 <get_speed+0x56>
	{
		speed = 0;
	}
	else if (ADC_value <= 921)
     b18:	8a 39       	cpi	r24, 0x9A	; 154
     b1a:	23 e0       	ldi	r18, 0x03	; 3
     b1c:	92 07       	cpc	r25, r18
     b1e:	24 f5       	brge	.+72     	; 0xb68 <get_speed+0x5c>
	{
		if (ADC_value <= 819)
     b20:	84 33       	cpi	r24, 0x34	; 52
     b22:	23 e0       	ldi	r18, 0x03	; 3
     b24:	92 07       	cpc	r25, r18
     b26:	1c f5       	brge	.+70     	; 0xb6e <get_speed+0x62>
		{
			if (ADC_value <= 717)
     b28:	8e 3c       	cpi	r24, 0xCE	; 206
     b2a:	22 e0       	ldi	r18, 0x02	; 2
     b2c:	92 07       	cpc	r25, r18
     b2e:	14 f5       	brge	.+68     	; 0xb74 <get_speed+0x68>
			{
				if (ADC_value <= 615)
     b30:	88 36       	cpi	r24, 0x68	; 104
     b32:	22 e0       	ldi	r18, 0x02	; 2
     b34:	92 07       	cpc	r25, r18
     b36:	0c f5       	brge	.+66     	; 0xb7a <get_speed+0x6e>
				{
					if (ADC_value <= 513)
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	22 e0       	ldi	r18, 0x02	; 2
     b3c:	92 07       	cpc	r25, r18
     b3e:	04 f5       	brge	.+64     	; 0xb80 <get_speed+0x74>
					{
						if (ADC_value <= 411)
     b40:	8c 39       	cpi	r24, 0x9C	; 156
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	92 07       	cpc	r25, r18
     b46:	fc f4       	brge	.+62     	; 0xb86 <get_speed+0x7a>
						{
							if (ADC_value <= 309)
     b48:	86 33       	cpi	r24, 0x36	; 54
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	92 07       	cpc	r25, r18
     b4e:	f4 f4       	brge	.+60     	; 0xb8c <get_speed+0x80>
							{
								if (ADC_value <= 207)
     b50:	80 3d       	cpi	r24, 0xD0	; 208
     b52:	91 05       	cpc	r25, r1
     b54:	f4 f4       	brge	.+60     	; 0xb92 <get_speed+0x86>
								{
									if (ADC_value <= 105)
     b56:	8a 36       	cpi	r24, 0x6A	; 106
     b58:	91 05       	cpc	r25, r1
     b5a:	f4 f4       	brge	.+60     	; 0xb98 <get_speed+0x8c>
									{
										speed = VERY_FAST;
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret
int get_speed(int ADC_value)
{
	int speed;
	if (ADC_value >= 490 && ADC_value <= 530)
	{
		speed = 0;
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	08 95       	ret
			speed = -FAST;
		}
	}
	else
	{
		speed = -VERY_FAST;
     b68:	80 ef       	ldi	r24, 0xF0	; 240
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
     b6c:	08 95       	ret
				speed = -MEDIUM_FAST;
			}
		}
		else
		{
			speed = -FAST;
     b6e:	88 ef       	ldi	r24, 0xF8	; 248
     b70:	9f ef       	ldi	r25, 0xFF	; 255
     b72:	08 95       	ret
					speed = -MEDIUM_SLOW;
				}
			}
			else
			{
				speed = -MEDIUM_FAST;
     b74:	8c ef       	ldi	r24, 0xFC	; 252
     b76:	9f ef       	ldi	r25, 0xFF	; 255
     b78:	08 95       	ret
						speed = -SLOW;
					}
				}
				else
				{
					speed = -MEDIUM_SLOW;
     b7a:	8e ef       	ldi	r24, 0xFE	; 254
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	08 95       	ret
							speed = SLOW;
						}
					}
					else
					{
						speed = -SLOW;
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	08 95       	ret
								speed = MEDIUM_SLOW;
							}
						}
						else
						{
							speed = SLOW;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	08 95       	ret
									speed = MEDIUM_FAST;
								}
							}
							else
							{
								speed = MEDIUM_SLOW;
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret
										speed = FAST;
									}
								}
								else
								{
									speed = MEDIUM_FAST;
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	08 95       	ret
									{
										speed = VERY_FAST;
									}
									else
									{
										speed = FAST;
     b98:	88 e0       	ldi	r24, 0x08	; 8
     b9a:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		speed = -VERY_FAST;
	}
	return speed;
}
     b9c:	08 95       	ret

00000b9e <update_paddle>:

void update_paddle(int ADC_value)
{
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
	int move = 0;
	if (control == JOYSTICK)
     ba6:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <control>
     baa:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <control+0x1>
     bae:	23 2b       	or	r18, r19
     bb0:	21 f4       	brne	.+8      	; 0xbba <update_paddle+0x1c>
	{
		move = get_speed(ADC_value);
     bb2:	0e 94 86 05 	call	0xb0c	; 0xb0c <get_speed>
     bb6:	ec 01       	movw	r28, r24
     bb8:	15 c0       	rjmp	.+42     	; 0xbe4 <update_paddle+0x46>
	}
	else if (control == NODE)
     bba:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <control>
     bbe:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <control+0x1>
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	39 f4       	brne	.+14     	; 0xbd4 <update_paddle+0x36>
	{
		if(!(PIND & (1 << PIND2)))
     bc6:	4a 9b       	sbis	0x09, 2	; 9
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <update_paddle+0x3c>
		{
			move = FAST;
		}
		else if(!(PIND & (1 << PIND5)))
     bca:	4d 99       	sbic	0x09, 5	; 9
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <update_paddle+0x42>
		{
			move = -FAST;
     bce:	c8 ef       	ldi	r28, 0xF8	; 248
     bd0:	df ef       	ldi	r29, 0xFF	; 255
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <update_paddle+0x46>
	return speed;
}

void update_paddle(int ADC_value)
{
	int move = 0;
     bd4:	c0 e0       	ldi	r28, 0x00	; 0
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <update_paddle+0x46>
	}
	else if (control == NODE)
	{
		if(!(PIND & (1 << PIND2)))
		{
			move = FAST;
     bda:	c8 e0       	ldi	r28, 0x08	; 8
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <update_paddle+0x46>
		{
			move = -FAST;
		}
		else
		{
			move = 0;
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
				
	if (move != 0)
     be4:	20 97       	sbiw	r28, 0x00	; 0
     be6:	81 f0       	breq	.+32     	; 0xc08 <update_paddle+0x6a>
	{
		LCD_drawBlock(LCD_WIDTH - paddle_width - 1, y, LCD_WIDTH - 1, (y + paddle_height), BLACK);
     be8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <y>
     bec:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <y+0x1>
     bf0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y>
     bf4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <y+0x1>
     bf8:	21 5f       	subi	r18, 0xF1	; 241
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	4f e9       	ldi	r20, 0x9F	; 159
     c00:	8e e9       	ldi	r24, 0x9E	; 158
     c02:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
     c06:	0f c0       	rjmp	.+30     	; 0xc26 <update_paddle+0x88>
	}
	else
	{
		LCD_drawBlock(LCD_WIDTH - paddle_width - 1, y, LCD_WIDTH - 1, (y + paddle_height), WHITE);
     c08:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <y>
     c0c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <y+0x1>
     c10:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y>
     c14:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <y+0x1>
     c18:	21 5f       	subi	r18, 0xF1	; 241
     c1a:	0f ef       	ldi	r16, 0xFF	; 255
     c1c:	1f ef       	ldi	r17, 0xFF	; 255
     c1e:	4f e9       	ldi	r20, 0x9F	; 159
     c20:	8e e9       	ldi	r24, 0x9E	; 158
     c22:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
	}
				
	y += move;
     c26:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <y>
     c2a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <y+0x1>
     c2e:	8c 0f       	add	r24, r28
     c30:	9d 1f       	adc	r25, r29
     c32:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <y+0x1>
     c36:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y>

	if (y > BOTTOM)
     c3a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <y>
     c3e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <y+0x1>
     c42:	81 37       	cpi	r24, 0x71	; 113
     c44:	91 05       	cpc	r25, r1
     c46:	3c f0       	brlt	.+14     	; 0xc56 <update_paddle+0xb8>
	{
		y = BOTTOM;
     c48:	80 e7       	ldi	r24, 0x70	; 112
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <y+0x1>
     c50:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y>
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <update_paddle+0xcc>
	}
	else if (y < TOP)
     c56:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <y>
     c5a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <y+0x1>
     c5e:	99 23       	and	r25, r25
     c60:	24 f4       	brge	.+8      	; 0xc6a <update_paddle+0xcc>
	{
		y = TOP;
     c62:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <y+0x1>
     c66:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <y>
	}
	LCD_drawBlock(LCD_WIDTH - paddle_width - 1, y, LCD_WIDTH - 1, (y + paddle_height), WHITE);
     c6a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <y>
     c6e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <y+0x1>
     c72:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <y>
     c76:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <y+0x1>
     c7a:	21 5f       	subi	r18, 0xF1	; 241
     c7c:	0f ef       	ldi	r16, 0xFF	; 255
     c7e:	1f ef       	ldi	r17, 0xFF	; 255
     c80:	4f e9       	ldi	r20, 0x9F	; 159
     c82:	8e e9       	ldi	r24, 0x9E	; 158
     c84:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <update_cpu_paddle>:

void update_cpu_paddle(int mode)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ec 01       	movw	r28, r24
	int cpu_move = 0;
	int ball_position = ball_position_y();
     ca0:	0e 94 a0 04 	call	0x940	; 0x940 <ball_position_y>
     ca4:	7c 01       	movw	r14, r24
	
	LCD_drawBlock(0, cpu_y, paddle_width, cpu_y + paddle_height, BLACK);
     ca6:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <cpu_y>
     caa:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     cae:	60 91 c6 03 	lds	r22, 0x03C6	; 0x8003c6 <cpu_y>
     cb2:	70 91 c7 03 	lds	r23, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     cb6:	21 5f       	subi	r18, 0xF1	; 241
     cb8:	00 e0       	ldi	r16, 0x00	; 0
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
	
	if (ball_position > cpu_y + paddle_height / 2)
     cc4:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     cc8:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     ccc:	07 96       	adiw	r24, 0x07	; 7
     cce:	8e 15       	cp	r24, r14
     cd0:	9f 05       	cpc	r25, r15
     cd2:	5c f4       	brge	.+22     	; 0xcea <update_cpu_paddle+0x58>
	{
		if (ball_position > cpu_y + paddle_height)
     cd4:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     cd8:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     cdc:	0f 96       	adiw	r24, 0x0f	; 15
     cde:	8e 15       	cp	r24, r14
     ce0:	9f 05       	cpc	r25, r15
     ce2:	dc f0       	brlt	.+54     	; 0xd1a <update_cpu_paddle+0x88>
		{
			cpu_move = mode;
		}
		else
		{
			cpu_move = SLOW;
     ce4:	c1 e0       	ldi	r28, 0x01	; 1
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
     ce8:	18 c0       	rjmp	.+48     	; 0xd1a <update_cpu_paddle+0x88>
		}
	}
	else if (ball_position < cpu_y + paddle_height / 2)
     cea:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     cee:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     cf2:	07 96       	adiw	r24, 0x07	; 7
     cf4:	e8 16       	cp	r14, r24
     cf6:	f9 06       	cpc	r15, r25
     cf8:	5c f4       	brge	.+22     	; 0xd10 <update_cpu_paddle+0x7e>
	{
		if (ball_position < cpu_y)
     cfa:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     cfe:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d02:	e8 16       	cp	r14, r24
     d04:	f9 06       	cpc	r15, r25
     d06:	3c f4       	brge	.+14     	; 0xd16 <update_cpu_paddle+0x84>
		{
			cpu_move = -mode;
     d08:	d1 95       	neg	r29
     d0a:	c1 95       	neg	r28
     d0c:	d1 09       	sbc	r29, r1
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <update_cpu_paddle+0x88>
			cpu_move = -SLOW;
		}
	}
	else
	{
		cpu_move = 0;
     d10:	c0 e0       	ldi	r28, 0x00	; 0
     d12:	d0 e0       	ldi	r29, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <update_cpu_paddle+0x88>
		{
			cpu_move = -mode;
		}
		else
		{
			cpu_move = -SLOW;
     d16:	cf ef       	ldi	r28, 0xFF	; 255
     d18:	df ef       	ldi	r29, 0xFF	; 255
	}
	else
	{
		cpu_move = 0;
	}
	cpu_y += cpu_move;
     d1a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     d1e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d22:	8c 0f       	add	r24, r28
     d24:	9d 1f       	adc	r25, r29
     d26:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <cpu_y+0x1>
     d2a:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <cpu_y>
	if (cpu_y > BOTTOM)
     d2e:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     d32:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d36:	81 37       	cpi	r24, 0x71	; 113
     d38:	91 05       	cpc	r25, r1
     d3a:	3c f0       	brlt	.+14     	; 0xd4a <update_cpu_paddle+0xb8>
	{
		cpu_y = BOTTOM;
     d3c:	80 e7       	ldi	r24, 0x70	; 112
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <cpu_y+0x1>
     d44:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <cpu_y>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <update_cpu_paddle+0xcc>
	}
	else if (cpu_y < TOP)
     d4a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     d4e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d52:	99 23       	and	r25, r25
     d54:	24 f4       	brge	.+8      	; 0xd5e <update_cpu_paddle+0xcc>
	{
		cpu_y = TOP;
     d56:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <cpu_y+0x1>
     d5a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <cpu_y>
	}
	LCD_drawBlock(0, cpu_y, paddle_width, cpu_y + paddle_height, WHITE);
     d5e:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <cpu_y>
     d62:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d66:	60 91 c6 03 	lds	r22, 0x03C6	; 0x8003c6 <cpu_y>
     d6a:	70 91 c7 03 	lds	r23, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d6e:	21 5f       	subi	r18, 0xF1	; 241
     d70:	0f ef       	ldi	r16, 0xFF	; 255
     d72:	1f ef       	ldi	r17, 0xFF	; 255
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	08 95       	ret

00000d8a <get_paddle_position>:

int get_paddle_position()
{
	return y;
     d8a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <y>
     d8e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <y+0x1>
}
     d92:	08 95       	ret

00000d94 <get_cpu_paddle_position>:

int get_cpu_paddle_position()
{
	return cpu_y;
     d94:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <cpu_y>
     d98:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <cpu_y+0x1>
     d9c:	08 95       	ret

00000d9e <LCD_drawPixel>:
					D += 2 * dx;
				}
			}
		}
	}
}
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ea 01       	movw	r28, r20
     da4:	26 2f       	mov	r18, r22
     da6:	48 2f       	mov	r20, r24
     da8:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_setAddr>
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 aa 09 	call	0x1354	; 0x1354 <SPI_ControllerTx_16bit>
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <LCD_drawChar>:
     db8:	7f 92       	push	r7
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	5a 01       	movw	r10, r20
     dd4:	90 e2       	ldi	r25, 0x20	; 32
     dd6:	a9 1a       	sub	r10, r25
     dd8:	b1 08       	sbc	r11, r1
     dda:	40 ea       	ldi	r20, 0xA0	; 160
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	48 1b       	sub	r20, r24
     de0:	51 09       	sbc	r21, r1
     de2:	48 30       	cpi	r20, 0x08	; 8
     de4:	51 05       	cpc	r21, r1
     de6:	0c f4       	brge	.+2      	; 0xdea <LCD_drawChar+0x32>
     de8:	41 c0       	rjmp	.+130    	; 0xe6c <LCD_drawChar+0xb4>
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	46 1b       	sub	r20, r22
     df0:	51 09       	sbc	r21, r1
     df2:	48 30       	cpi	r20, 0x08	; 8
     df4:	51 05       	cpc	r21, r1
     df6:	8c f5       	brge	.+98     	; 0xe5a <LCD_drawChar+0xa2>
     df8:	39 c0       	rjmp	.+114    	; 0xe6c <LCD_drawChar+0xb4>
     dfa:	f5 01       	movw	r30, r10
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	ea 0d       	add	r30, r10
     e06:	fb 1d       	adc	r31, r11
     e08:	ef 56       	subi	r30, 0x6F	; 111
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	ee 0d       	add	r30, r14
     e0e:	ff 1d       	adc	r31, r15
     e10:	70 80       	ld	r7, Z
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	d0 e0       	ldi	r29, 0x00	; 0
     e16:	1a c0       	rjmp	.+52     	; 0xe4c <LCD_drawChar+0x94>
     e18:	27 2d       	mov	r18, r7
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	0c 2e       	mov	r0, r28
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <LCD_drawChar+0x6c>
     e20:	35 95       	asr	r19
     e22:	27 95       	ror	r18
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <LCD_drawChar+0x68>
     e28:	20 ff       	sbrs	r18, 0
     e2a:	08 c0       	rjmp	.+16     	; 0xe3c <LCD_drawChar+0x84>
     e2c:	a6 01       	movw	r20, r12
     e2e:	6c 2f       	mov	r22, r28
     e30:	68 0d       	add	r22, r8
     e32:	89 2d       	mov	r24, r9
     e34:	8e 0d       	add	r24, r14
     e36:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <LCD_drawChar+0x92>
     e3c:	a8 01       	movw	r20, r16
     e3e:	6c 2f       	mov	r22, r28
     e40:	68 0d       	add	r22, r8
     e42:	89 2d       	mov	r24, r9
     e44:	8e 0d       	add	r24, r14
     e46:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
     e4a:	21 96       	adiw	r28, 0x01	; 1
     e4c:	c8 30       	cpi	r28, 0x08	; 8
     e4e:	d1 05       	cpc	r29, r1
     e50:	1c f3       	brlt	.-58     	; 0xe18 <LCD_drawChar+0x60>
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	e9 1a       	sub	r14, r25
     e56:	f9 0a       	sbc	r15, r25
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <LCD_drawChar+0xac>
     e5a:	69 01       	movw	r12, r18
     e5c:	86 2e       	mov	r8, r22
     e5e:	98 2e       	mov	r9, r24
     e60:	e1 2c       	mov	r14, r1
     e62:	f1 2c       	mov	r15, r1
     e64:	85 e0       	ldi	r24, 0x05	; 5
     e66:	e8 16       	cp	r14, r24
     e68:	f1 04       	cpc	r15, r1
     e6a:	3c f2       	brlt	.-114    	; 0xdfa <LCD_drawChar+0x42>
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	08 95       	ret

00000e88 <LCD_drawBlock>:
* @fn			void LCD_drawBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint16_t color)
* @brief		Draw a colored block at coordinates
* @note
*****************************************************************************/
void LCD_drawBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint16_t color)
{
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	b8 2e       	mov	r11, r24
     e9c:	f4 2e       	mov	r15, r20
     e9e:	e2 2e       	mov	r14, r18
	if (x0 > x1)
     ea0:	48 17       	cp	r20, r24
     ea2:	b0 f5       	brcc	.+108    	; 0xf10 <LCD_drawBlock+0x88>
	{
		if (y0 > y1)
     ea4:	26 17       	cp	r18, r22
     ea6:	d0 f4       	brcc	.+52     	; 0xedc <LCD_drawBlock+0x54>
		{
			for (int i = y0; i >= y1; i--)
     ea8:	c6 2e       	mov	r12, r22
     eaa:	d1 2c       	mov	r13, r1
     eac:	11 c0       	rjmp	.+34     	; 0xed0 <LCD_drawBlock+0x48>
			{
				for (int j = x0; j >= x1; j--)
     eae:	cb 2d       	mov	r28, r11
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <LCD_drawBlock+0x38>
				{
					LCD_drawPixel(j, i, color);
     eb4:	a8 01       	movw	r20, r16
     eb6:	6c 2d       	mov	r22, r12
     eb8:	8c 2f       	mov	r24, r28
     eba:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
	{
		if (y0 > y1)
		{
			for (int i = y0; i >= y1; i--)
			{
				for (int j = x0; j >= x1; j--)
     ebe:	21 97       	sbiw	r28, 0x01	; 1
     ec0:	8f 2d       	mov	r24, r15
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	c8 17       	cp	r28, r24
     ec6:	d9 07       	cpc	r29, r25
     ec8:	ac f7       	brge	.-22     	; 0xeb4 <LCD_drawBlock+0x2c>
{
	if (x0 > x1)
	{
		if (y0 > y1)
		{
			for (int i = y0; i >= y1; i--)
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	c8 1a       	sub	r12, r24
     ece:	d1 08       	sbc	r13, r1
     ed0:	8e 2d       	mov	r24, r14
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	c8 16       	cp	r12, r24
     ed6:	d9 06       	cpc	r13, r25
     ed8:	54 f7       	brge	.-44     	; 0xeae <LCD_drawBlock+0x26>
     eda:	4f c0       	rjmp	.+158    	; 0xf7a <LCD_drawBlock+0xf2>
				}
			}
		}
		else
		{
			for (int i = y0; i <= y1; i++)
     edc:	c6 2e       	mov	r12, r22
     ede:	d1 2c       	mov	r13, r1
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <LCD_drawBlock+0x7c>
			{
				for (int j = x0; j >= x1; j--)
     ee2:	cb 2d       	mov	r28, r11
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <LCD_drawBlock+0x6c>
				{
					LCD_drawPixel(j, i, color);
     ee8:	a8 01       	movw	r20, r16
     eea:	6c 2d       	mov	r22, r12
     eec:	8c 2f       	mov	r24, r28
     eee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
		}
		else
		{
			for (int i = y0; i <= y1; i++)
			{
				for (int j = x0; j >= x1; j--)
     ef2:	21 97       	sbiw	r28, 0x01	; 1
     ef4:	8f 2d       	mov	r24, r15
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	c8 17       	cp	r28, r24
     efa:	d9 07       	cpc	r29, r25
     efc:	ac f7       	brge	.-22     	; 0xee8 <LCD_drawBlock+0x60>
				}
			}
		}
		else
		{
			for (int i = y0; i <= y1; i++)
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	c8 1a       	sub	r12, r24
     f02:	d8 0a       	sbc	r13, r24
     f04:	8e 2d       	mov	r24, r14
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	8c 15       	cp	r24, r12
     f0a:	9d 05       	cpc	r25, r13
     f0c:	54 f7       	brge	.-44     	; 0xee2 <LCD_drawBlock+0x5a>
     f0e:	35 c0       	rjmp	.+106    	; 0xf7a <LCD_drawBlock+0xf2>
					LCD_drawPixel(j, i, color);
				}
			}
		}
	}
	else if (y0 > y1)
     f10:	26 17       	cp	r18, r22
     f12:	d0 f4       	brcc	.+52     	; 0xf48 <LCD_drawBlock+0xc0>
	{
		for (int i = y0; i >= y1; i--)
     f14:	c6 2e       	mov	r12, r22
     f16:	d1 2c       	mov	r13, r1
     f18:	11 c0       	rjmp	.+34     	; 0xf3c <LCD_drawBlock+0xb4>
		{
			for (int j = x0; j <= x1; j++)
     f1a:	cb 2d       	mov	r28, r11
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <LCD_drawBlock+0xa4>
			{
				LCD_drawPixel(j, i, color);
     f20:	a8 01       	movw	r20, r16
     f22:	6c 2d       	mov	r22, r12
     f24:	8c 2f       	mov	r24, r28
     f26:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
	}
	else if (y0 > y1)
	{
		for (int i = y0; i >= y1; i--)
		{
			for (int j = x0; j <= x1; j++)
     f2a:	21 96       	adiw	r28, 0x01	; 1
     f2c:	8f 2d       	mov	r24, r15
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	8c 17       	cp	r24, r28
     f32:	9d 07       	cpc	r25, r29
     f34:	ac f7       	brge	.-22     	; 0xf20 <LCD_drawBlock+0x98>
			}
		}
	}
	else if (y0 > y1)
	{
		for (int i = y0; i >= y1; i--)
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	c8 1a       	sub	r12, r24
     f3a:	d1 08       	sbc	r13, r1
     f3c:	8e 2d       	mov	r24, r14
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	c8 16       	cp	r12, r24
     f42:	d9 06       	cpc	r13, r25
     f44:	54 f7       	brge	.-44     	; 0xf1a <LCD_drawBlock+0x92>
     f46:	19 c0       	rjmp	.+50     	; 0xf7a <LCD_drawBlock+0xf2>
			}
		}
	}
	else
	{
		for (int i = y0; i <= y1; i++)
     f48:	c6 2f       	mov	r28, r22
     f4a:	d0 e0       	ldi	r29, 0x00	; 0
     f4c:	11 c0       	rjmp	.+34     	; 0xf70 <LCD_drawBlock+0xe8>
		{
			for (int j = x0; j <= x1; j++)
     f4e:	cb 2c       	mov	r12, r11
     f50:	d1 2c       	mov	r13, r1
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <LCD_drawBlock+0xdc>
			{
				LCD_drawPixel(j, i, color);
     f54:	a8 01       	movw	r20, r16
     f56:	6c 2f       	mov	r22, r28
     f58:	8c 2d       	mov	r24, r12
     f5a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
	}
	else
	{
		for (int i = y0; i <= y1; i++)
		{
			for (int j = x0; j <= x1; j++)
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	c8 1a       	sub	r12, r24
     f62:	d8 0a       	sbc	r13, r24
     f64:	8f 2d       	mov	r24, r15
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8c 15       	cp	r24, r12
     f6a:	9d 05       	cpc	r25, r13
     f6c:	9c f7       	brge	.-26     	; 0xf54 <LCD_drawBlock+0xcc>
			}
		}
	}
	else
	{
		for (int i = y0; i <= y1; i++)
     f6e:	21 96       	adiw	r28, 0x01	; 1
     f70:	8e 2d       	mov	r24, r14
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	8c 17       	cp	r24, r28
     f76:	9d 07       	cpc	r25, r29
     f78:	54 f7       	brge	.-44     	; 0xf4e <LCD_drawBlock+0xc6>
			{
				LCD_drawPixel(j, i, color);
			}
		}
	}
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	08 95       	ret

00000f8e <LCD_setScreen>:
* @fn			void LCD_setScreen(uint16_t color)
* @brief		Draw the entire screen to a color
* @note
*****************************************************************************/
void LCD_setScreen(uint16_t color) 
{
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	7c 01       	movw	r14, r24
	for (int i = 0; i < LCD_WIDTH; i++)
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	0e c0       	rjmp	.+28     	; 0xfbe <LCD_setScreen+0x30>
	{
		for (int j = 0; j < LCD_HEIGHT; j++)
		{
			LCD_drawPixel(i, j, color);
     fa2:	a7 01       	movw	r20, r14
     fa4:	6c 2f       	mov	r22, r28
     fa6:	80 2f       	mov	r24, r16
     fa8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
*****************************************************************************/
void LCD_setScreen(uint16_t color) 
{
	for (int i = 0; i < LCD_WIDTH; i++)
	{
		for (int j = 0; j < LCD_HEIGHT; j++)
     fac:	21 96       	adiw	r28, 0x01	; 1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <LCD_setScreen+0x26>
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	c0 38       	cpi	r28, 0x80	; 128
     fb6:	d1 05       	cpc	r29, r1
     fb8:	a4 f3       	brlt	.-24     	; 0xfa2 <LCD_setScreen+0x14>
* @brief		Draw the entire screen to a color
* @note
*****************************************************************************/
void LCD_setScreen(uint16_t color) 
{
	for (int i = 0; i < LCD_WIDTH; i++)
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	00 3a       	cpi	r16, 0xA0	; 160
     fc0:	11 05       	cpc	r17, r1
     fc2:	b4 f3       	brlt	.-20     	; 0xfb0 <LCD_setScreen+0x22>
		for (int j = 0; j < LCD_HEIGHT; j++)
		{
			LCD_drawPixel(i, j, color);
		}
	}
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <LCD_drawString>:
* @fn			void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg)
* @brief		Draw a string starting at the point with foreground and background colors
* @note
*****************************************************************************/
void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg)
{
     fd2:	7f 92       	push	r7
     fd4:	8f 92       	push	r8
     fd6:	9f 92       	push	r9
     fd8:	af 92       	push	r10
     fda:	bf 92       	push	r11
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	78 2e       	mov	r7, r24
     fee:	86 2e       	mov	r8, r22
     ff0:	5a 01       	movw	r10, r20
     ff2:	69 01       	movw	r12, r18
     ff4:	78 01       	movw	r14, r16
	int x0 = x;
	for (int i = 0; str[i] != NULL; i++)
     ff6:	98 2e       	mov	r9, r24
     ff8:	c0 e0       	ldi	r28, 0x00	; 0
     ffa:	d0 e0       	ldi	r29, 0x00	; 0
     ffc:	15 c0       	rjmp	.+42     	; 0x1028 <LCD_drawString+0x56>
	{
		if (str[i] == '\n')
     ffe:	4a 30       	cpi	r20, 0x0A	; 10
    1000:	21 f4       	brne	.+8      	; 0x100a <LCD_drawString+0x38>
		{
			y += 8;
    1002:	88 e0       	ldi	r24, 0x08	; 8
    1004:	88 0e       	add	r8, r24
			x = x0;
    1006:	97 2c       	mov	r9, r7
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <LCD_drawString+0x54>
		}
		else if (str[i] == '\t')
    100a:	49 30       	cpi	r20, 0x09	; 9
    100c:	19 f4       	brne	.+6      	; 0x1014 <LCD_drawString+0x42>
		{
			x += 5;
    100e:	85 e0       	ldi	r24, 0x05	; 5
    1010:	98 0e       	add	r9, r24
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <LCD_drawString+0x54>
		}
		else
		{
			LCD_drawChar(x, y, str[i], fg, bg);
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	87 01       	movw	r16, r14
    1018:	96 01       	movw	r18, r12
    101a:	68 2d       	mov	r22, r8
    101c:	89 2d       	mov	r24, r9
    101e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LCD_drawChar>
			x += 5;
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	98 0e       	add	r9, r24
* @note
*****************************************************************************/
void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg)
{
	int x0 = x;
	for (int i = 0; str[i] != NULL; i++)
    1026:	21 96       	adiw	r28, 0x01	; 1
    1028:	f5 01       	movw	r30, r10
    102a:	ec 0f       	add	r30, r28
    102c:	fd 1f       	adc	r31, r29
    102e:	40 81       	ld	r20, Z
    1030:	41 11       	cpse	r20, r1
    1032:	e5 cf       	rjmp	.-54     	; 0xffe <LCD_drawString+0x2c>
		{
			LCD_drawChar(x, y, str[i], fg, bg);
			x += 5;
		}
	}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	08 95       	ret

00001050 <update_score>:
	update_score(0, CPU);
	update_score(0, PLAYER);
}

void update_score(int score, int player)
{
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
	int x = 0;
	if (player == PLAYER)
    1056:	61 30       	cpi	r22, 0x01	; 1
    1058:	71 05       	cpc	r23, r1
    105a:	21 f0       	breq	.+8      	; 0x1064 <update_score+0x14>
	{
		x = LCD_WIDTH / 2 + 20;
	}
	else if (player == CPU)
    105c:	67 2b       	or	r22, r23
    105e:	21 f0       	breq	.+8      	; 0x1068 <update_score+0x18>
	update_score(0, PLAYER);
}

void update_score(int score, int player)
{
	int x = 0;
    1060:	c0 e0       	ldi	r28, 0x00	; 0
    1062:	03 c0       	rjmp	.+6      	; 0x106a <update_score+0x1a>
	if (player == PLAYER)
	{
		x = LCD_WIDTH / 2 + 20;
    1064:	c4 e6       	ldi	r28, 0x64	; 100
    1066:	01 c0       	rjmp	.+2      	; 0x106a <update_score+0x1a>
	}
	else if (player == CPU)
	{
		x = LCD_WIDTH / 2 - 25;
    1068:	c7 e3       	ldi	r28, 0x37	; 55
	}
	
	if (score == 1)
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	99 f4       	brne	.+38     	; 0x1096 <update_score+0x46>
	{
		LCD_drawString(x, 8, "01", WHITE, BLACK);
    1070:	00 e0       	ldi	r16, 0x00	; 0
    1072:	10 e0       	ldi	r17, 0x00	; 0
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	41 e7       	ldi	r20, 0x71	; 113
    107a:	53 e0       	ldi	r21, 0x03	; 3
    107c:	68 e0       	ldi	r22, 0x08	; 8
    107e:	8c 2f       	mov	r24, r28
    1080:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "01", WHITE, BLACK);
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	41 e7       	ldi	r20, 0x71	; 113
    108a:	53 e0       	ldi	r21, 0x03	; 3
    108c:	68 e0       	ldi	r22, 0x08	; 8
    108e:	8c 2f       	mov	r24, r28
    1090:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    1094:	ed c0       	rjmp	.+474    	; 0x1270 <update_score+0x220>
	}
	else if (score == 2)
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	91 05       	cpc	r25, r1
    109a:	99 f4       	brne	.+38     	; 0x10c2 <update_score+0x72>
	{
		LCD_drawString(x, 8, "02", WHITE, BLACK);
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	44 e7       	ldi	r20, 0x74	; 116
    10a6:	53 e0       	ldi	r21, 0x03	; 3
    10a8:	68 e0       	ldi	r22, 0x08	; 8
    10aa:	8c 2f       	mov	r24, r28
    10ac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "02", WHITE, BLACK);
    10b0:	2f ef       	ldi	r18, 0xFF	; 255
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	44 e7       	ldi	r20, 0x74	; 116
    10b6:	53 e0       	ldi	r21, 0x03	; 3
    10b8:	68 e0       	ldi	r22, 0x08	; 8
    10ba:	8c 2f       	mov	r24, r28
    10bc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    10c0:	d7 c0       	rjmp	.+430    	; 0x1270 <update_score+0x220>
	}
	else if (score == 3)
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	99 f4       	brne	.+38     	; 0x10ee <update_score+0x9e>
	{
		LCD_drawString(x, 8, "03", WHITE, BLACK);
    10c8:	00 e0       	ldi	r16, 0x00	; 0
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	47 e7       	ldi	r20, 0x77	; 119
    10d2:	53 e0       	ldi	r21, 0x03	; 3
    10d4:	68 e0       	ldi	r22, 0x08	; 8
    10d6:	8c 2f       	mov	r24, r28
    10d8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "03", WHITE, BLACK);
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	3f ef       	ldi	r19, 0xFF	; 255
    10e0:	47 e7       	ldi	r20, 0x77	; 119
    10e2:	53 e0       	ldi	r21, 0x03	; 3
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	8c 2f       	mov	r24, r28
    10e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    10ec:	c1 c0       	rjmp	.+386    	; 0x1270 <update_score+0x220>
	}
	else if (score == 4)
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	91 05       	cpc	r25, r1
    10f2:	99 f4       	brne	.+38     	; 0x111a <update_score+0xca>
	{
		LCD_drawString(x, 8, "04", WHITE, BLACK);
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
    10f8:	2f ef       	ldi	r18, 0xFF	; 255
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4a e7       	ldi	r20, 0x7A	; 122
    10fe:	53 e0       	ldi	r21, 0x03	; 3
    1100:	68 e0       	ldi	r22, 0x08	; 8
    1102:	8c 2f       	mov	r24, r28
    1104:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "04", WHITE, BLACK);
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4a e7       	ldi	r20, 0x7A	; 122
    110e:	53 e0       	ldi	r21, 0x03	; 3
    1110:	68 e0       	ldi	r22, 0x08	; 8
    1112:	8c 2f       	mov	r24, r28
    1114:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    1118:	ab c0       	rjmp	.+342    	; 0x1270 <update_score+0x220>
	}
	else if (score == 5)
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	91 05       	cpc	r25, r1
    111e:	99 f4       	brne	.+38     	; 0x1146 <update_score+0xf6>
	{
		LCD_drawString(x, 8, "05", WHITE, BLACK);
    1120:	00 e0       	ldi	r16, 0x00	; 0
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	4d e7       	ldi	r20, 0x7D	; 125
    112a:	53 e0       	ldi	r21, 0x03	; 3
    112c:	68 e0       	ldi	r22, 0x08	; 8
    112e:	8c 2f       	mov	r24, r28
    1130:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "05", WHITE, BLACK);
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4d e7       	ldi	r20, 0x7D	; 125
    113a:	53 e0       	ldi	r21, 0x03	; 3
    113c:	68 e0       	ldi	r22, 0x08	; 8
    113e:	8c 2f       	mov	r24, r28
    1140:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    1144:	95 c0       	rjmp	.+298    	; 0x1270 <update_score+0x220>
	}
	else if (score == 6)
    1146:	86 30       	cpi	r24, 0x06	; 6
    1148:	91 05       	cpc	r25, r1
    114a:	99 f4       	brne	.+38     	; 0x1172 <update_score+0x122>
	{
		LCD_drawString(x, 8, "06", WHITE, BLACK);
    114c:	00 e0       	ldi	r16, 0x00	; 0
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	53 e0       	ldi	r21, 0x03	; 3
    1158:	68 e0       	ldi	r22, 0x08	; 8
    115a:	8c 2f       	mov	r24, r28
    115c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "06", WHITE, BLACK);
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	53 e0       	ldi	r21, 0x03	; 3
    1168:	68 e0       	ldi	r22, 0x08	; 8
    116a:	8c 2f       	mov	r24, r28
    116c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    1170:	7f c0       	rjmp	.+254    	; 0x1270 <update_score+0x220>
	}
	else if (score == 7)
    1172:	87 30       	cpi	r24, 0x07	; 7
    1174:	91 05       	cpc	r25, r1
    1176:	99 f4       	brne	.+38     	; 0x119e <update_score+0x14e>
	{
		LCD_drawString(x, 8, "07", WHITE, BLACK);
    1178:	00 e0       	ldi	r16, 0x00	; 0
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	2f ef       	ldi	r18, 0xFF	; 255
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	43 e8       	ldi	r20, 0x83	; 131
    1182:	53 e0       	ldi	r21, 0x03	; 3
    1184:	68 e0       	ldi	r22, 0x08	; 8
    1186:	8c 2f       	mov	r24, r28
    1188:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "07", WHITE, BLACK);
    118c:	2f ef       	ldi	r18, 0xFF	; 255
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	43 e8       	ldi	r20, 0x83	; 131
    1192:	53 e0       	ldi	r21, 0x03	; 3
    1194:	68 e0       	ldi	r22, 0x08	; 8
    1196:	8c 2f       	mov	r24, r28
    1198:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    119c:	69 c0       	rjmp	.+210    	; 0x1270 <update_score+0x220>
	}
	else if (score == 8)
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	91 05       	cpc	r25, r1
    11a2:	99 f4       	brne	.+38     	; 0x11ca <update_score+0x17a>
	{
		LCD_drawString(x, 8, "08", WHITE, BLACK);
    11a4:	00 e0       	ldi	r16, 0x00	; 0
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	46 e8       	ldi	r20, 0x86	; 134
    11ae:	53 e0       	ldi	r21, 0x03	; 3
    11b0:	68 e0       	ldi	r22, 0x08	; 8
    11b2:	8c 2f       	mov	r24, r28
    11b4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "08", WHITE, BLACK);
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	46 e8       	ldi	r20, 0x86	; 134
    11be:	53 e0       	ldi	r21, 0x03	; 3
    11c0:	68 e0       	ldi	r22, 0x08	; 8
    11c2:	8c 2f       	mov	r24, r28
    11c4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    11c8:	53 c0       	rjmp	.+166    	; 0x1270 <update_score+0x220>
	}
	else if (score == 9)
    11ca:	89 30       	cpi	r24, 0x09	; 9
    11cc:	91 05       	cpc	r25, r1
    11ce:	99 f4       	brne	.+38     	; 0x11f6 <update_score+0x1a6>
	{
		LCD_drawString(x, 8, "09", WHITE, BLACK);
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	2f ef       	ldi	r18, 0xFF	; 255
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	49 e8       	ldi	r20, 0x89	; 137
    11da:	53 e0       	ldi	r21, 0x03	; 3
    11dc:	68 e0       	ldi	r22, 0x08	; 8
    11de:	8c 2f       	mov	r24, r28
    11e0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "09", WHITE, BLACK);
    11e4:	2f ef       	ldi	r18, 0xFF	; 255
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	49 e8       	ldi	r20, 0x89	; 137
    11ea:	53 e0       	ldi	r21, 0x03	; 3
    11ec:	68 e0       	ldi	r22, 0x08	; 8
    11ee:	8c 2f       	mov	r24, r28
    11f0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    11f4:	3d c0       	rjmp	.+122    	; 0x1270 <update_score+0x220>
	}
	else if (score == 10)
    11f6:	8a 30       	cpi	r24, 0x0A	; 10
    11f8:	91 05       	cpc	r25, r1
    11fa:	99 f4       	brne	.+38     	; 0x1222 <update_score+0x1d2>
	{
		LCD_drawString(x, 8, "10", WHITE, BLACK);
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	2f ef       	ldi	r18, 0xFF	; 255
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4c e8       	ldi	r20, 0x8C	; 140
    1206:	53 e0       	ldi	r21, 0x03	; 3
    1208:	68 e0       	ldi	r22, 0x08	; 8
    120a:	8c 2f       	mov	r24, r28
    120c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "10", WHITE, BLACK);
    1210:	2f ef       	ldi	r18, 0xFF	; 255
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4c e8       	ldi	r20, 0x8C	; 140
    1216:	53 e0       	ldi	r21, 0x03	; 3
    1218:	68 e0       	ldi	r22, 0x08	; 8
    121a:	8c 2f       	mov	r24, r28
    121c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    1220:	27 c0       	rjmp	.+78     	; 0x1270 <update_score+0x220>
	}
	else if (score == 11)
    1222:	0b 97       	sbiw	r24, 0x0b	; 11
    1224:	99 f4       	brne	.+38     	; 0x124c <update_score+0x1fc>
	{
		LCD_drawString(x, 8, "11", WHITE, BLACK);
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	2f ef       	ldi	r18, 0xFF	; 255
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e8       	ldi	r20, 0x8F	; 143
    1230:	53 e0       	ldi	r21, 0x03	; 3
    1232:	68 e0       	ldi	r22, 0x08	; 8
    1234:	8c 2f       	mov	r24, r28
    1236:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "11", WHITE, BLACK);
    123a:	2f ef       	ldi	r18, 0xFF	; 255
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e8       	ldi	r20, 0x8F	; 143
    1240:	53 e0       	ldi	r21, 0x03	; 3
    1242:	68 e0       	ldi	r22, 0x08	; 8
    1244:	8c 2f       	mov	r24, r28
    1246:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    124a:	12 c0       	rjmp	.+36     	; 0x1270 <update_score+0x220>
	}
	else
	{
		LCD_drawString(x, 8, "00", WHITE, BLACK);
    124c:	00 e0       	ldi	r16, 0x00	; 0
    124e:	10 e0       	ldi	r17, 0x00	; 0
    1250:	2f ef       	ldi	r18, 0xFF	; 255
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	42 e9       	ldi	r20, 0x92	; 146
    1256:	53 e0       	ldi	r21, 0x03	; 3
    1258:	68 e0       	ldi	r22, 0x08	; 8
    125a:	8c 2f       	mov	r24, r28
    125c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
		LCD_drawString(x, 8, "00", WHITE, BLACK);
    1260:	2f ef       	ldi	r18, 0xFF	; 255
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	42 e9       	ldi	r20, 0x92	; 146
    1266:	53 e0       	ldi	r21, 0x03	; 3
    1268:	68 e0       	ldi	r22, 0x08	; 8
    126a:	8c 2f       	mov	r24, r28
    126c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
	}
}
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <scoring_init>:

#define soft_reset()

void scoring_init()
{
	DDRD |= (1 << DDD1);
    1278:	8a b1       	in	r24, 0x0a	; 10
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8a b9       	out	0x0a, r24	; 10
	update_score(0, CPU);
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
	update_score(0, PLAYER);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 28 08 	call	0x1050	; 0x1050 <update_score>
    1296:	08 95       	ret

00001298 <winner>:
	}
}

void winner(int player)
{
	if (player == PLAYER)
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	59 f4       	brne	.+22     	; 0x12b4 <winner+0x1c>
	{
		LCD_drawString(LCD_WIDTH / 2 - (13 * CHAR_WIDTH) / 2, LCD_HEIGHT / 2 - (CHAR_HEIGHT / 2), "PLAYER 1 WINS", BLACK, WHITE);
    129e:	0f ef       	ldi	r16, 0xFF	; 255
    12a0:	1f ef       	ldi	r17, 0xFF	; 255
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	45 e9       	ldi	r20, 0x95	; 149
    12a8:	53 e0       	ldi	r21, 0x03	; 3
    12aa:	6c e3       	ldi	r22, 0x3C	; 60
    12ac:	80 e3       	ldi	r24, 0x30	; 48
    12ae:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    12b2:	0c c0       	rjmp	.+24     	; 0x12cc <winner+0x34>
	}
	else if (player == CPU)
    12b4:	89 2b       	or	r24, r25
    12b6:	51 f4       	brne	.+20     	; 0x12cc <winner+0x34>
	{
		LCD_drawString(LCD_WIDTH / 2 - (13 * CHAR_WIDTH) / 2, LCD_HEIGHT / 2 - (CHAR_HEIGHT / 2), "COMPUTER WINS", BLACK, WHITE);
    12b8:	0f ef       	ldi	r16, 0xFF	; 255
    12ba:	1f ef       	ldi	r17, 0xFF	; 255
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	43 ea       	ldi	r20, 0xA3	; 163
    12c2:	53 e0       	ldi	r21, 0x03	; 3
    12c4:	6c e3       	ldi	r22, 0x3C	; 60
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
    12cc:	2f ef       	ldi	r18, 0xFF	; 255
    12ce:	83 ed       	ldi	r24, 0xD3	; 211
    12d0:	90 e3       	ldi	r25, 0x30	; 48
    12d2:	21 50       	subi	r18, 0x01	; 1
    12d4:	80 40       	sbci	r24, 0x00	; 0
    12d6:	90 40       	sbci	r25, 0x00	; 0
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <winner+0x3a>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <winner+0x44>
    12dc:	00 00       	nop
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    12de:	98 e0       	ldi	r25, 0x08	; 8
    12e0:	88 e1       	ldi	r24, 0x18	; 24
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	a8 95       	wdr
    12e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    12f2:	ff cf       	rjmp	.-2      	; 0x12f2 <winner+0x5a>

000012f4 <SPI_Controller_Init>:

	SPDR = temp;		//Place data to be sent on registers
	while(!(SPSR & (1<<SPIF)));	//wait for end of transmission
	SPDR = data;		//Place data to be sent on registers
	while(!(SPSR & (1<<SPIF)));	//wait for end of transmission
}
    12f4:	80 e5       	ldi	r24, 0x50	; 80
    12f6:	8c bd       	out	0x2c, r24	; 44
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	8d bd       	out	0x2d, r24	; 45
    12fc:	08 95       	ret

000012fe <lcd_pin_init>:
    12fe:	84 b1       	in	r24, 0x04	; 4
    1300:	8f 62       	ori	r24, 0x2F	; 47
    1302:	84 b9       	out	0x04, r24	; 4
    1304:	8a b1       	in	r24, 0x0a	; 10
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	8a b9       	out	0x0a, r24	; 10
    130a:	84 b5       	in	r24, 0x24	; 36
    130c:	83 68       	ori	r24, 0x83	; 131
    130e:	84 bd       	out	0x24, r24	; 36
    1310:	85 b5       	in	r24, 0x25	; 37
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	85 bd       	out	0x25, r24	; 37
    1316:	8f e7       	ldi	r24, 0x7F	; 127
    1318:	87 bd       	out	0x27, r24	; 39
    131a:	83 ed       	ldi	r24, 0xD3	; 211
    131c:	90 e3       	ldi	r25, 0x30	; 48
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <lcd_pin_init+0x20>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <lcd_pin_init+0x26>
    1324:	00 00       	nop
    1326:	85 b1       	in	r24, 0x05	; 5
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	85 b9       	out	0x05, r24	; 5
    132c:	08 95       	ret

0000132e <Delay_ms>:
    132e:	07 c0       	rjmp	.+14     	; 0x133e <Delay_ms+0x10>
    1330:	89 ef       	ldi	r24, 0xF9	; 249
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <Delay_ms+0x6>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <Delay_ms+0xc>
    133a:	00 00       	nop
    133c:	c9 01       	movw	r24, r18
    133e:	9c 01       	movw	r18, r24
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	31 09       	sbc	r19, r1
    1344:	89 2b       	or	r24, r25
    1346:	a1 f7       	brne	.-24     	; 0x1330 <Delay_ms+0x2>
    1348:	08 95       	ret

0000134a <SPI_ControllerTx_stream>:
    134a:	8e bd       	out	0x2e, r24	; 46
    134c:	0d b4       	in	r0, 0x2d	; 45
    134e:	07 fe       	sbrs	r0, 7
    1350:	fd cf       	rjmp	.-6      	; 0x134c <SPI_ControllerTx_stream+0x2>
    1352:	08 95       	ret

00001354 <SPI_ControllerTx_16bit>:
    1354:	25 b1       	in	r18, 0x05	; 5
    1356:	2b 7f       	andi	r18, 0xFB	; 251
    1358:	25 b9       	out	0x05, r18	; 5
    135a:	9e bd       	out	0x2e, r25	; 46
    135c:	0d b4       	in	r0, 0x2d	; 45
    135e:	07 fe       	sbrs	r0, 7
    1360:	fd cf       	rjmp	.-6      	; 0x135c <SPI_ControllerTx_16bit+0x8>
    1362:	8e bd       	out	0x2e, r24	; 46
    1364:	0d b4       	in	r0, 0x2d	; 45
    1366:	07 fe       	sbrs	r0, 7
    1368:	fd cf       	rjmp	.-6      	; 0x1364 <SPI_ControllerTx_16bit+0x10>
    136a:	85 b1       	in	r24, 0x05	; 5
    136c:	84 60       	ori	r24, 0x04	; 4
    136e:	85 b9       	out	0x05, r24	; 5
    1370:	08 95       	ret

00001372 <sendCommands>:
* @fn			void sendCommands (const uint8_t *cmds, uint8_t length)
* @brief		Parse and send array of commands thru SPI
* @note
*****************************************************************************/
void sendCommands (const uint8_t *cmds, uint8_t length)
{
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
	//Command Code, # of data bytes, data bytes (if any), delay in ms
	uint8_t numCommands, numData, waitTime;

	numCommands = length;	// # of commands to send

	clear(LCD_PORT, LCD_TFT_CS);	//CS pulled low to start communication
    137e:	85 b1       	in	r24, 0x05	; 5
    1380:	8b 7f       	andi	r24, 0xFB	; 251
    1382:	85 b9       	out	0x05, r24	; 5

	while (numCommands--)	// Send each command
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <sendCommands+0x62>
	{
		clear(LCD_PORT, LCD_DC);	//D/C pulled low for command
    1386:	85 b1       	in	r24, 0x05	; 5
    1388:	8e 7f       	andi	r24, 0xFE	; 254
    138a:	85 b9       	out	0x05, r24	; 5
		
		SPI_ControllerTx_stream(*cmds++);
    138c:	88 81       	ld	r24, Y
    138e:	0e 94 a5 09 	call	0x134a	; 0x134a <SPI_ControllerTx_stream>
		
		numData = *cmds++;	// # of data bytes to send
    1392:	fe 01       	movw	r30, r28
    1394:	32 96       	adiw	r30, 0x02	; 2
    1396:	89 81       	ldd	r24, Y+1	; 0x01

		set(LCD_PORT, LCD_DC);	//D/C set high for data
    1398:	95 b1       	in	r25, 0x05	; 5
    139a:	91 60       	ori	r25, 0x01	; 1
    139c:	95 b9       	out	0x05, r25	; 5
		while (numData--)	// Send each data byte...
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <sendCommands+0x3e>
		{
			SPI_ControllerTx_stream(*cmds++);
    13a0:	8f 01       	movw	r16, r30
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	0e 94 a5 09 	call	0x134a	; 0x134a <SPI_ControllerTx_stream>
		SPI_ControllerTx_stream(*cmds++);
		
		numData = *cmds++;	// # of data bytes to send

		set(LCD_PORT, LCD_DC);	//D/C set high for data
		while (numData--)	// Send each data byte...
    13ac:	8c 2f       	mov	r24, r28
		{
			SPI_ControllerTx_stream(*cmds++);
    13ae:	f8 01       	movw	r30, r16
		SPI_ControllerTx_stream(*cmds++);
		
		numData = *cmds++;	// # of data bytes to send

		set(LCD_PORT, LCD_DC);	//D/C set high for data
		while (numData--)	// Send each data byte...
    13b0:	cf ef       	ldi	r28, 0xFF	; 255
    13b2:	c8 0f       	add	r28, r24
    13b4:	81 11       	cpse	r24, r1
    13b6:	f4 cf       	rjmp	.-24     	; 0x13a0 <sendCommands+0x2e>
		{
			SPI_ControllerTx_stream(*cmds++);
			
		}

		waitTime = *cmds++;     // Read post-command delay time (ms)
    13b8:	ef 01       	movw	r28, r30
    13ba:	21 96       	adiw	r28, 0x01	; 1
    13bc:	80 81       	ld	r24, Z
		if (waitTime!=0)
    13be:	88 23       	and	r24, r24
    13c0:	41 f0       	breq	.+16     	; 0x13d2 <sendCommands+0x60>
		{
			Delay_ms((waitTime==255 ? 500 : waitTime));
    13c2:	8f 3f       	cpi	r24, 0xFF	; 255
    13c4:	11 f0       	breq	.+4      	; 0x13ca <sendCommands+0x58>
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <sendCommands+0x5c>
    13ca:	84 ef       	ldi	r24, 0xF4	; 244
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 97 09 	call	0x132e	; 0x132e <Delay_ms>
    13d2:	6f 2d       	mov	r22, r15

	numCommands = length;	// # of commands to send

	clear(LCD_PORT, LCD_TFT_CS);	//CS pulled low to start communication

	while (numCommands--)	// Send each command
    13d4:	ff 24       	eor	r15, r15
    13d6:	fa 94       	dec	r15
    13d8:	f6 0e       	add	r15, r22
    13da:	61 11       	cpse	r22, r1
    13dc:	d4 cf       	rjmp	.-88     	; 0x1386 <sendCommands+0x14>
		{
			Delay_ms((waitTime==255 ? 500 : waitTime));
		}
	}

	set(LCD_PORT, LCD_TFT_CS);	//set CS to high
    13de:	85 b1       	in	r24, 0x05	; 5
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	85 b9       	out	0x05, r24	; 5
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	08 95       	ret

000013f0 <lcd_init>:
* @brief		Initialize LCD settings
* @note
*****************************************************************************/
void lcd_init(void)
{
	lcd_pin_init();
    13f0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lcd_pin_init>
	SPI_Controller_Init();
    13f4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <SPI_Controller_Init>
    13f8:	81 ee       	ldi	r24, 0xE1	; 225
    13fa:	94 e0       	ldi	r25, 0x04	; 4
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <lcd_init+0xc>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <lcd_init+0x12>
    1402:	00 00       	nop
		ST7735_NORON, 0, 10,	//Normal display on
		ST7735_DISPON, 0, 100,            // Set display on
		ST7735_MADCTL, 1, MADCTL_MX | MADCTL_MV | MADCTL_RGB, 10		//Default to rotation 3
	};

	sendCommands(ST7735_cmds, 22);
    1404:	66 e1       	ldi	r22, 0x16	; 22
    1406:	8c e0       	ldi	r24, 0x0C	; 12
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	0e 94 b9 09 	call	0x1372	; 0x1372 <sendCommands>
    140e:	08 95       	ret

00001410 <LCD_setAddr>:
* @fn			void LCD_setAddr(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
* @brief		Set pixel memory address to write to
* @note
*****************************************************************************/
void LCD_setAddr(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	61 97       	sbiw	r28, 0x11	; 17
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
	uint8_t ST7735_cmds[]  =
    1424:	9a e2       	ldi	r25, 0x2A	; 42
    1426:	99 83       	std	Y+1, r25	; 0x01
    1428:	94 e0       	ldi	r25, 0x04	; 4
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	1b 82       	std	Y+3, r1	; 0x03
    142e:	8c 83       	std	Y+4, r24	; 0x04
    1430:	1d 82       	std	Y+5, r1	; 0x05
    1432:	4e 83       	std	Y+6, r20	; 0x06
    1434:	1f 82       	std	Y+7, r1	; 0x07
    1436:	8b e2       	ldi	r24, 0x2B	; 43
    1438:	88 87       	std	Y+8, r24	; 0x08
    143a:	99 87       	std	Y+9, r25	; 0x09
    143c:	1a 86       	std	Y+10, r1	; 0x0a
    143e:	6b 87       	std	Y+11, r22	; 0x0b
    1440:	1c 86       	std	Y+12, r1	; 0x0c
    1442:	2d 87       	std	Y+13, r18	; 0x0d
    1444:	1e 86       	std	Y+14, r1	; 0x0e
    1446:	8c e2       	ldi	r24, 0x2C	; 44
    1448:	8f 87       	std	Y+15, r24	; 0x0f
    144a:	18 8a       	std	Y+16, r1	; 0x10
    144c:	85 e0       	ldi	r24, 0x05	; 5
    144e:	89 8b       	std	Y+17, r24	; 0x11
	{
		ST7735_CASET, 4, 0x00, x0, 0x00, x1, 0,		// Column
		ST7735_RASET, 4, 0x00, y0, 0x00, y1, 0,		// Page
		ST7735_RAMWR, 0, 5				// Into RAM
	};
	sendCommands(ST7735_cmds, 3);
    1450:	63 e0       	ldi	r22, 0x03	; 3
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	0e 94 b9 09 	call	0x1372	; 0x1372 <sendCommands>
}
    145a:	61 96       	adiw	r28, 0x11	; 17
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <pick_mode_joystick>:

const uint16_t bkg = BLACK;
volatile int mode;

void pick_mode_joystick()
{	
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
	DDRD &= ~(1 << DDD4);
    1470:	8a b1       	in	r24, 0x0a	; 10
    1472:	8f 7e       	andi	r24, 0xEF	; 239
    1474:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << DDD4);
    1476:	8b b1       	in	r24, 0x0b	; 11
    1478:	80 61       	ori	r24, 0x10	; 16
    147a:	8b b9       	out	0x0b, r24	; 11
	
	LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", BLACK, WHITE);
    147c:	0f ef       	ldi	r16, 0xFF	; 255
    147e:	1f ef       	ldi	r17, 0xFF	; 255
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	41 eb       	ldi	r20, 0xB1	; 177
    1486:	53 e0       	ldi	r21, 0x03	; 3
    1488:	68 e3       	ldi	r22, 0x38	; 56
    148a:	86 e4       	ldi	r24, 0x46	; 70
    148c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
	LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", WHITE, BLACK);
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	46 eb       	ldi	r20, 0xB6	; 182
    149a:	53 e0       	ldi	r21, 0x03	; 3
    149c:	68 e4       	ldi	r22, 0x48	; 72
    149e:	86 e4       	ldi	r24, 0x46	; 70
    14a0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
	while(1)
	{
		if (ADC >= 530)
    14a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14ac:	82 31       	cpi	r24, 0x12	; 18
    14ae:	92 40       	sbci	r25, 0x02	; 2
    14b0:	d8 f0       	brcs	.+54     	; 0x14e8 <pick_mode_joystick+0x7c>
		{
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", WHITE, BLACK);
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	46 eb       	ldi	r20, 0xB6	; 182
    14bc:	53 e0       	ldi	r21, 0x03	; 3
    14be:	68 e4       	ldi	r22, 0x48	; 72
    14c0:	86 e4       	ldi	r24, 0x46	; 70
    14c2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", BLACK, WHITE);
    14c6:	0f ef       	ldi	r16, 0xFF	; 255
    14c8:	1f ef       	ldi	r17, 0xFF	; 255
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	41 eb       	ldi	r20, 0xB1	; 177
    14d0:	53 e0       	ldi	r21, 0x03	; 3
    14d2:	68 e3       	ldi	r22, 0x38	; 56
    14d4:	86 e4       	ldi	r24, 0x46	; 70
    14d6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			mode = MEDIUM_FAST;
    14da:	84 e0       	ldi	r24, 0x04	; 4
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    14e2:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
    14e6:	28 c0       	rjmp	.+80     	; 0x1538 <pick_mode_joystick+0xcc>
		}
		else if (ADC <= 490)
    14e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    14ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    14f0:	8b 3e       	cpi	r24, 0xEB	; 235
    14f2:	91 40       	sbci	r25, 0x01	; 1
    14f4:	d8 f4       	brcc	.+54     	; 0x152c <pick_mode_joystick+0xc0>
		{
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", WHITE, BLACK);
    14f6:	00 e0       	ldi	r16, 0x00	; 0
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	2f ef       	ldi	r18, 0xFF	; 255
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	41 eb       	ldi	r20, 0xB1	; 177
    1500:	53 e0       	ldi	r21, 0x03	; 3
    1502:	68 e3       	ldi	r22, 0x38	; 56
    1504:	86 e4       	ldi	r24, 0x46	; 70
    1506:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", BLACK, WHITE);
    150a:	0f ef       	ldi	r16, 0xFF	; 255
    150c:	1f ef       	ldi	r17, 0xFF	; 255
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	46 eb       	ldi	r20, 0xB6	; 182
    1514:	53 e0       	ldi	r21, 0x03	; 3
    1516:	68 e4       	ldi	r22, 0x48	; 72
    1518:	86 e4       	ldi	r24, 0x46	; 70
    151a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			mode = FAST;
    151e:	88 e0       	ldi	r24, 0x08	; 8
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    1526:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <pick_mode_joystick+0xcc>
		}
		else
		{
			mode = MEDIUM_FAST;
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    1534:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
		}

		if (!(PIND & (1 << PIND4)))
    1538:	4c 99       	sbic	0x09, 4	; 9
    153a:	b4 cf       	rjmp	.-152    	; 0x14a4 <pick_mode_joystick+0x38>
		{
			noteHigh();
    153c:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
			LCD_drawBlock(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, LCD_WIDTH / 2 + 20, LCD_HEIGHT / 2 + 16, BLACK);
    1540:	00 e0       	ldi	r16, 0x00	; 0
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	20 e5       	ldi	r18, 0x50	; 80
    1546:	44 e6       	ldi	r20, 0x64	; 100
    1548:	68 e3       	ldi	r22, 0x38	; 56
    154a:	86 e4       	ldi	r24, 0x46	; 70
    154c:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
			break;
		}
	}	
}
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <pick_mode_blynk>:

void pick_mode_blynk()
{
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
	LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", BLACK, WHITE);
    155a:	0f ef       	ldi	r16, 0xFF	; 255
    155c:	1f ef       	ldi	r17, 0xFF	; 255
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	41 eb       	ldi	r20, 0xB1	; 177
    1564:	53 e0       	ldi	r21, 0x03	; 3
    1566:	68 e3       	ldi	r22, 0x38	; 56
    1568:	86 e4       	ldi	r24, 0x46	; 70
    156a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
	LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", WHITE, BLACK);
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	2f ef       	ldi	r18, 0xFF	; 255
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	46 eb       	ldi	r20, 0xB6	; 182
    1578:	53 e0       	ldi	r21, 0x03	; 3
    157a:	68 e4       	ldi	r22, 0x48	; 72
    157c:	86 e4       	ldi	r24, 0x46	; 70
    157e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
	while(1)
	{
		if(!(PIND & (1 << PIND5)))
    1582:	4d 99       	sbic	0x09, 5	; 9
    1584:	1b c0       	rjmp	.+54     	; 0x15bc <pick_mode_blynk+0x66>
		{
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", WHITE, BLACK);
    1586:	00 e0       	ldi	r16, 0x00	; 0
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	46 eb       	ldi	r20, 0xB6	; 182
    1590:	53 e0       	ldi	r21, 0x03	; 3
    1592:	68 e4       	ldi	r22, 0x48	; 72
    1594:	86 e4       	ldi	r24, 0x46	; 70
    1596:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", BLACK, WHITE);
    159a:	0f ef       	ldi	r16, 0xFF	; 255
    159c:	1f ef       	ldi	r17, 0xFF	; 255
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	41 eb       	ldi	r20, 0xB1	; 177
    15a4:	53 e0       	ldi	r21, 0x03	; 3
    15a6:	68 e3       	ldi	r22, 0x38	; 56
    15a8:	86 e4       	ldi	r24, 0x46	; 70
    15aa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			mode = MEDIUM_FAST;
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    15b6:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
    15ba:	23 c0       	rjmp	.+70     	; 0x1602 <pick_mode_blynk+0xac>
		}
		else if(!(PIND & (1 << PIND2)))
    15bc:	4a 99       	sbic	0x09, 2	; 9
    15be:	1b c0       	rjmp	.+54     	; 0x15f6 <pick_mode_blynk+0xa0>
		{
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, "EASY", WHITE, BLACK);
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	41 eb       	ldi	r20, 0xB1	; 177
    15ca:	53 e0       	ldi	r21, 0x03	; 3
    15cc:	68 e3       	ldi	r22, 0x38	; 56
    15ce:	86 e4       	ldi	r24, 0x46	; 70
    15d0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			LCD_drawString(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 + 8, "HARD", BLACK, WHITE);
    15d4:	0f ef       	ldi	r16, 0xFF	; 255
    15d6:	1f ef       	ldi	r17, 0xFF	; 255
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	46 eb       	ldi	r20, 0xB6	; 182
    15de:	53 e0       	ldi	r21, 0x03	; 3
    15e0:	68 e4       	ldi	r22, 0x48	; 72
    15e2:	86 e4       	ldi	r24, 0x46	; 70
    15e4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_drawString>
			mode = FAST;
    15e8:	88 e0       	ldi	r24, 0x08	; 8
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    15f0:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <pick_mode_blynk+0xac>
		}
		else
		{
			mode = MEDIUM_FAST;
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <mode+0x1>
    15fe:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <mode>
		}

		if (!(PIND & (1 << PIND7)))
    1602:	4f 99       	sbic	0x09, 7	; 9
    1604:	be cf       	rjmp	.-132    	; 0x1582 <pick_mode_blynk+0x2c>
		{
			noteHigh();
    1606:	0e 94 ca 04 	call	0x994	; 0x994 <noteHigh>
			LCD_drawBlock(LCD_WIDTH / 2 - 10, LCD_HEIGHT / 2 - 8, LCD_WIDTH / 2 + 20, LCD_HEIGHT / 2 + 16, BLACK);
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	10 e0       	ldi	r17, 0x00	; 0
    160e:	20 e5       	ldi	r18, 0x50	; 80
    1610:	44 e6       	ldi	r20, 0x64	; 100
    1612:	68 e3       	ldi	r22, 0x38	; 56
    1614:	86 e4       	ldi	r24, 0x46	; 70
    1616:	0e 94 44 07 	call	0xe88	; 0xe88 <LCD_drawBlock>
			break;
		}
	}
}
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <repair_background>:

void repair_background()
{
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
	for(int i = 0; i < LCD_HEIGHT; i += 3)
    1624:	c0 e0       	ldi	r28, 0x00	; 0
    1626:	d0 e0       	ldi	r29, 0x00	; 0
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <repair_background+0x18>
	{
		LCD_drawPixel(LCD_WIDTH / 2, i, WHITE);
    162a:	4f ef       	ldi	r20, 0xFF	; 255
    162c:	5f ef       	ldi	r21, 0xFF	; 255
    162e:	6c 2f       	mov	r22, r28
    1630:	80 e5       	ldi	r24, 0x50	; 80
    1632:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_drawPixel>
	}
}

void repair_background()
{
	for(int i = 0; i < LCD_HEIGHT; i += 3)
    1636:	23 96       	adiw	r28, 0x03	; 3
    1638:	c0 38       	cpi	r28, 0x80	; 128
    163a:	d1 05       	cpc	r29, r1
    163c:	b4 f3       	brlt	.-20     	; 0x162a <repair_background+0xa>
	{
		LCD_drawPixel(LCD_WIDTH / 2, i, WHITE);
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <Initialize>:

void Initialize()
{
	DDRB &= ~(1 << DDB4);
    1644:	84 b1       	in	r24, 0x04	; 4
    1646:	8f 7e       	andi	r24, 0xEF	; 239
    1648:	84 b9       	out	0x04, r24	; 4

	lcd_init();
    164a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <lcd_init>
	if (PINB & (1 << PINB4))
    164e:	1c 9b       	sbis	0x03, 4	; 3
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <Initialize+0x14>
	{
		nodeMCU_init();
    1652:	0e 94 76 05 	call	0xaec	; 0xaec <nodeMCU_init>
    1656:	02 c0       	rjmp	.+4      	; 0x165c <Initialize+0x18>
	}
	else
	{
		joystick_init();
    1658:	0e 94 34 05 	call	0xa68	; 0xa68 <joystick_init>
	}
	LCD_setScreen(bkg);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 c7 07 	call	0xf8e	; 0xf8e <LCD_setScreen>
	buzzer_init();
    1664:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <buzzer_init>
	if (PINB & (1 << PINB4))
    1668:	1c 9b       	sbis	0x03, 4	; 3
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <Initialize+0x2e>
	{
		pick_mode_blynk();
    166c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <pick_mode_blynk>
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <Initialize+0x32>
	}
	else
	{
		pick_mode_joystick();		
    1672:	0e 94 36 0a 	call	0x146c	; 0x146c <pick_mode_joystick>
	}
	scoring_init();
    1676:	0e 94 3c 09 	call	0x1278	; 0x1278 <scoring_init>
	ball_init();
    167a:	0e 94 24 04 	call	0x848	; 0x848 <ball_init>
    167e:	08 95       	ret

00001680 <main>:
}

int main(void)
{
	Initialize();
    1680:	0e 94 22 0b 	call	0x1644	; 0x1644 <Initialize>
	while (1)
	{
		update_paddle(ADC);
    1684:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1688:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    168c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <update_paddle>
		update_cpu_paddle(mode);
    1690:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <mode>
    1694:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <mode+0x1>
    1698:	0e 94 49 06 	call	0xc92	; 0xc92 <update_cpu_paddle>
		update_ball();
    169c:	0e 94 40 01 	call	0x280	; 0x280 <update_ball>
/*		update_score();*/
		repair_background();
    16a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <repair_background>
    16a4:	ef cf       	rjmp	.-34     	; 0x1684 <main+0x4>

000016a6 <__divmodhi4>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	07 2e       	mov	r0, r23
    16aa:	16 f4       	brtc	.+4      	; 0x16b0 <__divmodhi4+0xa>
    16ac:	00 94       	com	r0
    16ae:	07 d0       	rcall	.+14     	; 0x16be <__divmodhi4_neg1>
    16b0:	77 fd       	sbrc	r23, 7
    16b2:	09 d0       	rcall	.+18     	; 0x16c6 <__divmodhi4_neg2>
    16b4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__udivmodhi4>
    16b8:	07 fc       	sbrc	r0, 7
    16ba:	05 d0       	rcall	.+10     	; 0x16c6 <__divmodhi4_neg2>
    16bc:	3e f4       	brtc	.+14     	; 0x16cc <__divmodhi4_exit>

000016be <__divmodhi4_neg1>:
    16be:	90 95       	com	r25
    16c0:	81 95       	neg	r24
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__divmodhi4_neg2>:
    16c6:	70 95       	com	r23
    16c8:	61 95       	neg	r22
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255

000016cc <__divmodhi4_exit>:
    16cc:	08 95       	ret

000016ce <__udivmodhi4>:
    16ce:	aa 1b       	sub	r26, r26
    16d0:	bb 1b       	sub	r27, r27
    16d2:	51 e1       	ldi	r21, 0x11	; 17
    16d4:	07 c0       	rjmp	.+14     	; 0x16e4 <__udivmodhi4_ep>

000016d6 <__udivmodhi4_loop>:
    16d6:	aa 1f       	adc	r26, r26
    16d8:	bb 1f       	adc	r27, r27
    16da:	a6 17       	cp	r26, r22
    16dc:	b7 07       	cpc	r27, r23
    16de:	10 f0       	brcs	.+4      	; 0x16e4 <__udivmodhi4_ep>
    16e0:	a6 1b       	sub	r26, r22
    16e2:	b7 0b       	sbc	r27, r23

000016e4 <__udivmodhi4_ep>:
    16e4:	88 1f       	adc	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	5a 95       	dec	r21
    16ea:	a9 f7       	brne	.-22     	; 0x16d6 <__udivmodhi4_loop>
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	08 95       	ret

000016f6 <__divsf3>:
    16f6:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divsf3x>
    16fa:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_round>
    16fe:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fp_pscB>
    1702:	58 f0       	brcs	.+22     	; 0x171a <__divsf3+0x24>
    1704:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_pscA>
    1708:	40 f0       	brcs	.+16     	; 0x171a <__divsf3+0x24>
    170a:	29 f4       	brne	.+10     	; 0x1716 <__divsf3+0x20>
    170c:	5f 3f       	cpi	r21, 0xFF	; 255
    170e:	29 f0       	breq	.+10     	; 0x171a <__divsf3+0x24>
    1710:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__fp_inf>
    1714:	51 11       	cpse	r21, r1
    1716:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_szero>
    171a:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__fp_nan>

0000171e <__divsf3x>:
    171e:	0e 94 81 0c 	call	0x1902	; 0x1902 <__fp_split3>
    1722:	68 f3       	brcs	.-38     	; 0x16fe <__divsf3+0x8>

00001724 <__divsf3_pse>:
    1724:	99 23       	and	r25, r25
    1726:	b1 f3       	breq	.-20     	; 0x1714 <__divsf3+0x1e>
    1728:	55 23       	and	r21, r21
    172a:	91 f3       	breq	.-28     	; 0x1710 <__divsf3+0x1a>
    172c:	95 1b       	sub	r25, r21
    172e:	55 0b       	sbc	r21, r21
    1730:	bb 27       	eor	r27, r27
    1732:	aa 27       	eor	r26, r26
    1734:	62 17       	cp	r22, r18
    1736:	73 07       	cpc	r23, r19
    1738:	84 07       	cpc	r24, r20
    173a:	38 f0       	brcs	.+14     	; 0x174a <__divsf3_pse+0x26>
    173c:	9f 5f       	subi	r25, 0xFF	; 255
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	aa 1f       	adc	r26, r26
    1748:	a9 f3       	breq	.-22     	; 0x1734 <__divsf3_pse+0x10>
    174a:	35 d0       	rcall	.+106    	; 0x17b6 <__divsf3_pse+0x92>
    174c:	0e 2e       	mov	r0, r30
    174e:	3a f0       	brmi	.+14     	; 0x175e <__divsf3_pse+0x3a>
    1750:	e0 e8       	ldi	r30, 0x80	; 128
    1752:	32 d0       	rcall	.+100    	; 0x17b8 <__divsf3_pse+0x94>
    1754:	91 50       	subi	r25, 0x01	; 1
    1756:	50 40       	sbci	r21, 0x00	; 0
    1758:	e6 95       	lsr	r30
    175a:	00 1c       	adc	r0, r0
    175c:	ca f7       	brpl	.-14     	; 0x1750 <__divsf3_pse+0x2c>
    175e:	2b d0       	rcall	.+86     	; 0x17b6 <__divsf3_pse+0x92>
    1760:	fe 2f       	mov	r31, r30
    1762:	29 d0       	rcall	.+82     	; 0x17b6 <__divsf3_pse+0x92>
    1764:	66 0f       	add	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	bb 1f       	adc	r27, r27
    176c:	26 17       	cp	r18, r22
    176e:	37 07       	cpc	r19, r23
    1770:	48 07       	cpc	r20, r24
    1772:	ab 07       	cpc	r26, r27
    1774:	b0 e8       	ldi	r27, 0x80	; 128
    1776:	09 f0       	breq	.+2      	; 0x177a <__divsf3_pse+0x56>
    1778:	bb 0b       	sbc	r27, r27
    177a:	80 2d       	mov	r24, r0
    177c:	bf 01       	movw	r22, r30
    177e:	ff 27       	eor	r31, r31
    1780:	93 58       	subi	r25, 0x83	; 131
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	3a f0       	brmi	.+14     	; 0x1794 <__divsf3_pse+0x70>
    1786:	9e 3f       	cpi	r25, 0xFE	; 254
    1788:	51 05       	cpc	r21, r1
    178a:	78 f0       	brcs	.+30     	; 0x17aa <__divsf3_pse+0x86>
    178c:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__fp_inf>
    1790:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_szero>
    1794:	5f 3f       	cpi	r21, 0xFF	; 255
    1796:	e4 f3       	brlt	.-8      	; 0x1790 <__divsf3_pse+0x6c>
    1798:	98 3e       	cpi	r25, 0xE8	; 232
    179a:	d4 f3       	brlt	.-12     	; 0x1790 <__divsf3_pse+0x6c>
    179c:	86 95       	lsr	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b7 95       	ror	r27
    17a4:	f7 95       	ror	r31
    17a6:	9f 5f       	subi	r25, 0xFF	; 255
    17a8:	c9 f7       	brne	.-14     	; 0x179c <__divsf3_pse+0x78>
    17aa:	88 0f       	add	r24, r24
    17ac:	91 1d       	adc	r25, r1
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	97 f9       	bld	r25, 7
    17b4:	08 95       	ret
    17b6:	e1 e0       	ldi	r30, 0x01	; 1
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	88 1f       	adc	r24, r24
    17be:	bb 1f       	adc	r27, r27
    17c0:	62 17       	cp	r22, r18
    17c2:	73 07       	cpc	r23, r19
    17c4:	84 07       	cpc	r24, r20
    17c6:	ba 07       	cpc	r27, r26
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <__divsf3_pse+0xae>
    17ca:	62 1b       	sub	r22, r18
    17cc:	73 0b       	sbc	r23, r19
    17ce:	84 0b       	sbc	r24, r20
    17d0:	ba 0b       	sbc	r27, r26
    17d2:	ee 1f       	adc	r30, r30
    17d4:	88 f7       	brcc	.-30     	; 0x17b8 <__divsf3_pse+0x94>
    17d6:	e0 95       	com	r30
    17d8:	08 95       	ret

000017da <__fixunssfsi>:
    17da:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fp_splitA>
    17de:	88 f0       	brcs	.+34     	; 0x1802 <__fixunssfsi+0x28>
    17e0:	9f 57       	subi	r25, 0x7F	; 127
    17e2:	98 f0       	brcs	.+38     	; 0x180a <__fixunssfsi+0x30>
    17e4:	b9 2f       	mov	r27, r25
    17e6:	99 27       	eor	r25, r25
    17e8:	b7 51       	subi	r27, 0x17	; 23
    17ea:	b0 f0       	brcs	.+44     	; 0x1818 <__fixunssfsi+0x3e>
    17ec:	e1 f0       	breq	.+56     	; 0x1826 <__fixunssfsi+0x4c>
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	1a f0       	brmi	.+6      	; 0x17fe <__fixunssfsi+0x24>
    17f8:	ba 95       	dec	r27
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__fixunssfsi+0x14>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <__fixunssfsi+0x4c>
    17fe:	b1 30       	cpi	r27, 0x01	; 1
    1800:	91 f0       	breq	.+36     	; 0x1826 <__fixunssfsi+0x4c>
    1802:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fp_zero>
    1806:	b1 e0       	ldi	r27, 0x01	; 1
    1808:	08 95       	ret
    180a:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_zero>
    180e:	67 2f       	mov	r22, r23
    1810:	78 2f       	mov	r23, r24
    1812:	88 27       	eor	r24, r24
    1814:	b8 5f       	subi	r27, 0xF8	; 248
    1816:	39 f0       	breq	.+14     	; 0x1826 <__fixunssfsi+0x4c>
    1818:	b9 3f       	cpi	r27, 0xF9	; 249
    181a:	cc f3       	brlt	.-14     	; 0x180e <__fixunssfsi+0x34>
    181c:	86 95       	lsr	r24
    181e:	77 95       	ror	r23
    1820:	67 95       	ror	r22
    1822:	b3 95       	inc	r27
    1824:	d9 f7       	brne	.-10     	; 0x181c <__fixunssfsi+0x42>
    1826:	3e f4       	brtc	.+14     	; 0x1836 <__fixunssfsi+0x5c>
    1828:	90 95       	com	r25
    182a:	80 95       	com	r24
    182c:	70 95       	com	r23
    182e:	61 95       	neg	r22
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	8f 4f       	sbci	r24, 0xFF	; 255
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	08 95       	ret

00001838 <__floatunsisf>:
    1838:	e8 94       	clt
    183a:	09 c0       	rjmp	.+18     	; 0x184e <__floatsisf+0x12>

0000183c <__floatsisf>:
    183c:	97 fb       	bst	r25, 7
    183e:	3e f4       	brtc	.+14     	; 0x184e <__floatsisf+0x12>
    1840:	90 95       	com	r25
    1842:	80 95       	com	r24
    1844:	70 95       	com	r23
    1846:	61 95       	neg	r22
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	99 23       	and	r25, r25
    1850:	a9 f0       	breq	.+42     	; 0x187c <__floatsisf+0x40>
    1852:	f9 2f       	mov	r31, r25
    1854:	96 e9       	ldi	r25, 0x96	; 150
    1856:	bb 27       	eor	r27, r27
    1858:	93 95       	inc	r25
    185a:	f6 95       	lsr	r31
    185c:	87 95       	ror	r24
    185e:	77 95       	ror	r23
    1860:	67 95       	ror	r22
    1862:	b7 95       	ror	r27
    1864:	f1 11       	cpse	r31, r1
    1866:	f8 cf       	rjmp	.-16     	; 0x1858 <__floatsisf+0x1c>
    1868:	fa f4       	brpl	.+62     	; 0x18a8 <__floatsisf+0x6c>
    186a:	bb 0f       	add	r27, r27
    186c:	11 f4       	brne	.+4      	; 0x1872 <__floatsisf+0x36>
    186e:	60 ff       	sbrs	r22, 0
    1870:	1b c0       	rjmp	.+54     	; 0x18a8 <__floatsisf+0x6c>
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	8f 4f       	sbci	r24, 0xFF	; 255
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <__floatsisf+0x6c>
    187c:	88 23       	and	r24, r24
    187e:	11 f0       	breq	.+4      	; 0x1884 <__floatsisf+0x48>
    1880:	96 e9       	ldi	r25, 0x96	; 150
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <__floatsisf+0x6a>
    1884:	77 23       	and	r23, r23
    1886:	21 f0       	breq	.+8      	; 0x1890 <__floatsisf+0x54>
    1888:	9e e8       	ldi	r25, 0x8E	; 142
    188a:	87 2f       	mov	r24, r23
    188c:	76 2f       	mov	r23, r22
    188e:	05 c0       	rjmp	.+10     	; 0x189a <__floatsisf+0x5e>
    1890:	66 23       	and	r22, r22
    1892:	71 f0       	breq	.+28     	; 0x18b0 <__floatsisf+0x74>
    1894:	96 e8       	ldi	r25, 0x86	; 134
    1896:	86 2f       	mov	r24, r22
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	2a f0       	brmi	.+10     	; 0x18a8 <__floatsisf+0x6c>
    189e:	9a 95       	dec	r25
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	da f7       	brpl	.-10     	; 0x189e <__floatsisf+0x62>
    18a8:	88 0f       	add	r24, r24
    18aa:	96 95       	lsr	r25
    18ac:	87 95       	ror	r24
    18ae:	97 f9       	bld	r25, 7
    18b0:	08 95       	ret

000018b2 <__fp_inf>:
    18b2:	97 f9       	bld	r25, 7
    18b4:	9f 67       	ori	r25, 0x7F	; 127
    18b6:	80 e8       	ldi	r24, 0x80	; 128
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	08 95       	ret

000018be <__fp_nan>:
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	80 ec       	ldi	r24, 0xC0	; 192
    18c2:	08 95       	ret

000018c4 <__fp_pscA>:
    18c4:	00 24       	eor	r0, r0
    18c6:	0a 94       	dec	r0
    18c8:	16 16       	cp	r1, r22
    18ca:	17 06       	cpc	r1, r23
    18cc:	18 06       	cpc	r1, r24
    18ce:	09 06       	cpc	r0, r25
    18d0:	08 95       	ret

000018d2 <__fp_pscB>:
    18d2:	00 24       	eor	r0, r0
    18d4:	0a 94       	dec	r0
    18d6:	12 16       	cp	r1, r18
    18d8:	13 06       	cpc	r1, r19
    18da:	14 06       	cpc	r1, r20
    18dc:	05 06       	cpc	r0, r21
    18de:	08 95       	ret

000018e0 <__fp_round>:
    18e0:	09 2e       	mov	r0, r25
    18e2:	03 94       	inc	r0
    18e4:	00 0c       	add	r0, r0
    18e6:	11 f4       	brne	.+4      	; 0x18ec <__fp_round+0xc>
    18e8:	88 23       	and	r24, r24
    18ea:	52 f0       	brmi	.+20     	; 0x1900 <__fp_round+0x20>
    18ec:	bb 0f       	add	r27, r27
    18ee:	40 f4       	brcc	.+16     	; 0x1900 <__fp_round+0x20>
    18f0:	bf 2b       	or	r27, r31
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <__fp_round+0x18>
    18f4:	60 ff       	sbrs	r22, 0
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <__fp_round+0x20>
    18f8:	6f 5f       	subi	r22, 0xFF	; 255
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	8f 4f       	sbci	r24, 0xFF	; 255
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	08 95       	ret

00001902 <__fp_split3>:
    1902:	57 fd       	sbrc	r21, 7
    1904:	90 58       	subi	r25, 0x80	; 128
    1906:	44 0f       	add	r20, r20
    1908:	55 1f       	adc	r21, r21
    190a:	59 f0       	breq	.+22     	; 0x1922 <__fp_splitA+0x10>
    190c:	5f 3f       	cpi	r21, 0xFF	; 255
    190e:	71 f0       	breq	.+28     	; 0x192c <__fp_splitA+0x1a>
    1910:	47 95       	ror	r20

00001912 <__fp_splitA>:
    1912:	88 0f       	add	r24, r24
    1914:	97 fb       	bst	r25, 7
    1916:	99 1f       	adc	r25, r25
    1918:	61 f0       	breq	.+24     	; 0x1932 <__fp_splitA+0x20>
    191a:	9f 3f       	cpi	r25, 0xFF	; 255
    191c:	79 f0       	breq	.+30     	; 0x193c <__fp_splitA+0x2a>
    191e:	87 95       	ror	r24
    1920:	08 95       	ret
    1922:	12 16       	cp	r1, r18
    1924:	13 06       	cpc	r1, r19
    1926:	14 06       	cpc	r1, r20
    1928:	55 1f       	adc	r21, r21
    192a:	f2 cf       	rjmp	.-28     	; 0x1910 <__fp_split3+0xe>
    192c:	46 95       	lsr	r20
    192e:	f1 df       	rcall	.-30     	; 0x1912 <__fp_splitA>
    1930:	08 c0       	rjmp	.+16     	; 0x1942 <__fp_splitA+0x30>
    1932:	16 16       	cp	r1, r22
    1934:	17 06       	cpc	r1, r23
    1936:	18 06       	cpc	r1, r24
    1938:	99 1f       	adc	r25, r25
    193a:	f1 cf       	rjmp	.-30     	; 0x191e <__fp_splitA+0xc>
    193c:	86 95       	lsr	r24
    193e:	71 05       	cpc	r23, r1
    1940:	61 05       	cpc	r22, r1
    1942:	08 94       	sec
    1944:	08 95       	ret

00001946 <__fp_zero>:
    1946:	e8 94       	clt

00001948 <__fp_szero>:
    1948:	bb 27       	eor	r27, r27
    194a:	66 27       	eor	r22, r22
    194c:	77 27       	eor	r23, r23
    194e:	cb 01       	movw	r24, r22
    1950:	97 f9       	bld	r25, 7
    1952:	08 95       	ret

00001954 <do_rand>:
    1954:	8f 92       	push	r8
    1956:	9f 92       	push	r9
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24
    196a:	68 81       	ld	r22, Y
    196c:	79 81       	ldd	r23, Y+1	; 0x01
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	61 15       	cp	r22, r1
    1974:	71 05       	cpc	r23, r1
    1976:	81 05       	cpc	r24, r1
    1978:	91 05       	cpc	r25, r1
    197a:	21 f4       	brne	.+8      	; 0x1984 <do_rand+0x30>
    197c:	64 e2       	ldi	r22, 0x24	; 36
    197e:	79 ed       	ldi	r23, 0xD9	; 217
    1980:	8b e5       	ldi	r24, 0x5B	; 91
    1982:	97 e0       	ldi	r25, 0x07	; 7
    1984:	2d e1       	ldi	r18, 0x1D	; 29
    1986:	33 ef       	ldi	r19, 0xF3	; 243
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
    1990:	49 01       	movw	r8, r18
    1992:	5a 01       	movw	r10, r20
    1994:	9b 01       	movw	r18, r22
    1996:	ac 01       	movw	r20, r24
    1998:	a7 ea       	ldi	r26, 0xA7	; 167
    199a:	b1 e4       	ldi	r27, 0x41	; 65
    199c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__muluhisi3>
    19a0:	6b 01       	movw	r12, r22
    19a2:	7c 01       	movw	r14, r24
    19a4:	ac ee       	ldi	r26, 0xEC	; 236
    19a6:	b4 ef       	ldi	r27, 0xF4	; 244
    19a8:	a5 01       	movw	r20, r10
    19aa:	94 01       	movw	r18, r8
    19ac:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__mulohisi3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8c 0d       	add	r24, r12
    19b6:	9d 1d       	adc	r25, r13
    19b8:	ae 1d       	adc	r26, r14
    19ba:	bf 1d       	adc	r27, r15
    19bc:	b7 ff       	sbrs	r27, 7
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <do_rand+0x72>
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	a1 09       	sbc	r26, r1
    19c4:	b0 48       	sbci	r27, 0x80	; 128
    19c6:	88 83       	st	Y, r24
    19c8:	99 83       	std	Y+1, r25	; 0x01
    19ca:	aa 83       	std	Y+2, r26	; 0x02
    19cc:	bb 83       	std	Y+3, r27	; 0x03
    19ce:	9f 77       	andi	r25, 0x7F	; 127
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	08 95       	ret

000019e6 <rand_r>:
    19e6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <do_rand>
    19ea:	08 95       	ret

000019ec <rand>:
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <do_rand>
    19f4:	08 95       	ret

000019f6 <srand>:
    19f6:	a0 e0       	ldi	r26, 0x00	; 0
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    19fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a02:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1a06:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1a0a:	08 95       	ret

00001a0c <__divmodsi4>:
    1a0c:	05 2e       	mov	r0, r21
    1a0e:	97 fb       	bst	r25, 7
    1a10:	1e f4       	brtc	.+6      	; 0x1a18 <__divmodsi4+0xc>
    1a12:	00 94       	com	r0
    1a14:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__negsi2>
    1a18:	57 fd       	sbrc	r21, 7
    1a1a:	07 d0       	rcall	.+14     	; 0x1a2a <__divmodsi4_neg2>
    1a1c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__udivmodsi4>
    1a20:	07 fc       	sbrc	r0, 7
    1a22:	03 d0       	rcall	.+6      	; 0x1a2a <__divmodsi4_neg2>
    1a24:	4e f4       	brtc	.+18     	; 0x1a38 <__divmodsi4_exit>
    1a26:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__negsi2>

00001a2a <__divmodsi4_neg2>:
    1a2a:	50 95       	com	r21
    1a2c:	40 95       	com	r20
    1a2e:	30 95       	com	r19
    1a30:	21 95       	neg	r18
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	4f 4f       	sbci	r20, 0xFF	; 255
    1a36:	5f 4f       	sbci	r21, 0xFF	; 255

00001a38 <__divmodsi4_exit>:
    1a38:	08 95       	ret

00001a3a <__negsi2>:
    1a3a:	90 95       	com	r25
    1a3c:	80 95       	com	r24
    1a3e:	70 95       	com	r23
    1a40:	61 95       	neg	r22
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	8f 4f       	sbci	r24, 0xFF	; 255
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	08 95       	ret

00001a4a <__muluhisi3>:
    1a4a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__umulhisi3>
    1a4e:	a5 9f       	mul	r26, r21
    1a50:	90 0d       	add	r25, r0
    1a52:	b4 9f       	mul	r27, r20
    1a54:	90 0d       	add	r25, r0
    1a56:	a4 9f       	mul	r26, r20
    1a58:	80 0d       	add	r24, r0
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	11 24       	eor	r1, r1
    1a5e:	08 95       	ret

00001a60 <__mulshisi3>:
    1a60:	b7 ff       	sbrs	r27, 7
    1a62:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__muluhisi3>

00001a66 <__mulohisi3>:
    1a66:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__muluhisi3>
    1a6a:	82 1b       	sub	r24, r18
    1a6c:	93 0b       	sbc	r25, r19
    1a6e:	08 95       	ret

00001a70 <__udivmodsi4>:
    1a70:	a1 e2       	ldi	r26, 0x21	; 33
    1a72:	1a 2e       	mov	r1, r26
    1a74:	aa 1b       	sub	r26, r26
    1a76:	bb 1b       	sub	r27, r27
    1a78:	fd 01       	movw	r30, r26
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <__udivmodsi4_ep>

00001a7c <__udivmodsi4_loop>:
    1a7c:	aa 1f       	adc	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	ee 1f       	adc	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	a2 17       	cp	r26, r18
    1a86:	b3 07       	cpc	r27, r19
    1a88:	e4 07       	cpc	r30, r20
    1a8a:	f5 07       	cpc	r31, r21
    1a8c:	20 f0       	brcs	.+8      	; 0x1a96 <__udivmodsi4_ep>
    1a8e:	a2 1b       	sub	r26, r18
    1a90:	b3 0b       	sbc	r27, r19
    1a92:	e4 0b       	sbc	r30, r20
    1a94:	f5 0b       	sbc	r31, r21

00001a96 <__udivmodsi4_ep>:
    1a96:	66 1f       	adc	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	1a 94       	dec	r1
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <__udivmodsi4_loop>
    1aa2:	60 95       	com	r22
    1aa4:	70 95       	com	r23
    1aa6:	80 95       	com	r24
    1aa8:	90 95       	com	r25
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	bd 01       	movw	r22, r26
    1ab0:	cf 01       	movw	r24, r30
    1ab2:	08 95       	ret

00001ab4 <__umulhisi3>:
    1ab4:	a2 9f       	mul	r26, r18
    1ab6:	b0 01       	movw	r22, r0
    1ab8:	b3 9f       	mul	r27, r19
    1aba:	c0 01       	movw	r24, r0
    1abc:	a3 9f       	mul	r26, r19
    1abe:	70 0d       	add	r23, r0
    1ac0:	81 1d       	adc	r24, r1
    1ac2:	11 24       	eor	r1, r1
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	b2 9f       	mul	r27, r18
    1ac8:	70 0d       	add	r23, r0
    1aca:	81 1d       	adc	r24, r1
    1acc:	11 24       	eor	r1, r1
    1ace:	91 1d       	adc	r25, r1
    1ad0:	08 95       	ret

00001ad2 <_exit>:
    1ad2:	f8 94       	cli

00001ad4 <__stop_program>:
    1ad4:	ff cf       	rjmp	.-2      	; 0x1ad4 <__stop_program>
